<html>
<head>
   <link rel = "stylesheet" href ="..\mystylesheet.css">
   <script src="..\myjsscript.js"></script>
</head>
<body>
<pre><hr /><div class="indent" >
<h4>Dependencies:</h4>
<a href=Executive.h.htm>Executive.h</a>
<a href=DependAnal.h.htm>DependAnal.h</a>
</div>
  <hr />
 <pre>
///////////////////////////////////////////////////////////////////////////
// Executive.cpp - Demonstrate Project2 Requirements                     //
// ver 1.4                                                               //
//-----------------------------------------------------------------      //
// Jim Fawcett (c) copyright 2016                                        //
// All rights granted provided this copyright notice is retained         //
//-----------------------------------------------------------------      //
// Language:    C++, Visual Studio 2015                                  //
// Platform:    Dell XPS 8900, Windows 10                                //
// Application: Project #2, CSE687 - Object Oriented Design, S2015       //
// Author:      Rishit Reddy Muthyala, Syracuse University, CST 4-187    //
//              rmuthyal@syr.edu                                         //
///////////////////////////////////////////////////////////////////////////

#include "Executive.h"
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;exception&gt;
#include &lt;iomanip&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;windows.h&gt;
#include &lt;shellapi.h&gt;
#include "../Parser/Parser.h"
#include "../FileSystem/FileSystem.h"
#include "../FileMgr/FileMgr.h"
#include "../Parser/ActionsAndRules.h"
#include "../Parser/ConfigureParser.h"
#include "../AbstractSyntaxTree/AbstrSynTree.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include "../DepthAnalysis/TypeAnalysis.h"
#include "../DependencyAnalysis/DependAnal.h"
#include "../Graph/Graph.h"
#include "../PublishCode/PublishCode.h"
using Rslt = Logging::StaticLogger&lt;0&gt;;  // use for application results
using Demo = Logging::StaticLogger&lt;1&gt;;  // use for demonstrations of processing
using Dbug = Logging::StaticLogger&lt;2&gt;;  // use for debug output
using namespace Utilities;
//using Rslt = Logging::StaticLogger&lt;1&gt;;
using namespace Async;
using namespace CodeAnalysis;
using namespace std;

/////////////////////////////////////////////////////////////////////
// AnalFileMgr class
// - Derives from FileMgr to make application specific file handler
//   by overriding FileMgr::file(), FileMgr::dir(), and FileMgr::done()

using Path = std::string;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;



class ClientHandler
{
<input onclick="expand_collapse(simplediv22.id, this.id)" type="button" value=" - " id="myButton22" /><div id="simplediv22" style="display:block; ">
public:
	using Path = std::string;
	using Pattern = std::string;
	using Patterns = std::vector&lt;Pattern&gt;;
	using File = std::string;
	using Files = std::vector&lt;File&gt;;
	using Ext = std::string;
	using Options = std::vector&lt;char&gt;;
	using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
	using Slocs = size_t;
	using SlocMap = std::unordered_map&lt;File, Slocs&gt;;
public:
	ClientHandler(BlockingQueue&lt;HttpMessage&gt;& msgQ) : msgQ_(msgQ) {
<input onclick="expand_collapse(simplediv23.id, this.id)" type="button" value=" - " id="myButton23" /><div id="simplediv23" style="display:block; ">}</div>
	void operator()(Socket socket);
	bool ProcessCommandLine(int argc, char* argv[]);
	HttpMessage readMessageForPost(HttpMessage& msg, Socket& socket);
private:
	bool connectionClosed_;
	HttpMessage readMessage(Socket& socket);
	bool readFile(const std::string& filename, size_t fileSize, const std::string& getDir, Socket& socket);
	BlockingQueue&lt;HttpMessage&gt;& msgQ_;
	Path path_;
}</div>;

/* This method is only used by runCodeAnalyzerOnServer to reduce the line count to 50 */
void OpenBrowserPagesToDemonstarteReq11(int argc, char * argv[]) {
<input onclick="expand_collapse(simplediv24.id, this.id)" type="button" value=" - " id="myButton24" /><div id="simplediv24" style="display:block; ">
	Utilities::StringHelper::Title("Demonstarting Requirement 11 is met: ");
	std::string path = argv[6];
	path += "/dependencyTable.htm";
	path = FileSystem::Path::getFullFileSpec(path);
	std::wstring sPath(path.begin(), path.end());
	Utilities::StringHelper::Title("Trying to open the dependency Files in the local folder");
	ShellExecute(NULL, L"open", sPath.c_str(), NULL, NULL, SW_SHOWNORMAL);
	std::string path1 = argv[8];
	path1 += "/dependencyTable.htm";
	std::wstring sPath1(path1.begin(), path1.end());
	Utilities::StringHelper::Title("Trying to open the dependency Files on the IIS virtula Directory folder");
	ShellExecute(NULL, L"open", sPath1.c_str(), NULL, NULL, SW_SHOWNORMAL);
	Utilities::StringHelper::Title("End of Requirement 11 Demonstation");
}</div>

int runCodeAnalyzerOnServer(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv25.id, this.id)" type="button" value=" - " id="myButton25" /><div id="simplediv25" style="display:block; ">
	using namespace CodeAnalysis;
	CodeAnalysisExecutive exec;
	try {
<input onclick="expand_collapse(simplediv26.id, this.id)" type="button" value=" - " id="myButton26" /><div id="simplediv26" style="display:block; ">
		bool succeeded = exec.ProcessCommandLine(argc, argv);
		exec.setDisplayModes();
		exec.startLogger(std::cout);
		std::ostringstream tOut("CodeAnalysis");
		Utils::sTitle(tOut.str(), 3, 92, tOut, '=');
		Rslt::write(tOut.str());
		Rslt::write("\n     " + exec.getAnalysisPath());
		Rslt::write("\n     " + exec.systemTime());
		Rslt::flush();
		exec.showCommandLineArguments(argc, argv);
		Rslt::write("\n");
		exec.getSourceFiles();
		exec.processSourceCode(true);
		std::ostringstream out;
		out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "searched" &lt;&lt; std::setw(6) &lt;&lt; exec.numDirs() &lt;&lt; " dirs";
		out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "processed" &lt;&lt; std::setw(6) &lt;&lt; exec.numFiles() &lt;&lt; " files";
		Rslt::write(out.str());
		exec.stopLogger();
		putline();
		TypeAnal ta;
		ta.doTypeAnal();
		ta.displayTypeTable();
		DependAnal dan;
		dan.ProcessCommandLine(argc, argv);
		dan.getSourceFiles();
		dan.processSourceCode();
		CodeAnalysisExecutive::depmapforlazyloading = dan.getDependencyTable();
		Utilities::StringHelper::Title("Demonstarting Requirement 4: Start of Code Publisher of Project 3 ");
		CodePublisher cp(dan.getDependencyTable());
		cp.ProcessCommandLine(argc, argv);
		cp.getSourceFiles();
		cp.displayDependencies();
		cp.demonstrateReq4();
		cp.processSourceCode();
		//Utilities::StringHelper::Title("End of Requirement 4:  Code Publisher has published all the source code to HTML content and stylings included");
		OpenBrowserPagesToDemonstarteReq11(argc, argv);
	}</div>
	catch (std::exception& except)
	{
<input onclick="expand_collapse(simplediv27.id, this.id)" type="button" value=" - " id="myButton27" /><div id="simplediv27" style="display:block; ">
		exec.flushLogger();
		std::cout &lt;&lt; "\n\n  caught exception in Executive::main: " + std::string(except.what()) + "\n\n";
		exec.stopLogger();
		return 1;
	}</div>
	return 0;
}</div>

//----&lt;this defines the processing of Get Requests and send the reply to the client &gt;----------

bool sendFinalMessageToClient(HttpMessage &msg)
{
<input onclick="expand_collapse(simplediv28.id, this.id)" type="button" value=" - " id="myButton28" /><div id="simplediv28" style="display:block; ">
	try
	{
<input onclick="expand_collapse(simplediv29.id, this.id)" type="button" value=" - " id="myButton29" /><div id="simplediv29" style="display:block; ">
		SocketSystem ss;
		SocketConnecter si;
		while (!si.connect("localhost", 8081))
		{
<input onclick="expand_collapse(simplediv30.id, this.id)" type="button" value=" - " id="myButton30" /><div id="simplediv30" style="display:block; ">
			Rslt::write("\n Server waiting to connect");
			::Sleep(100);
		}</div>
	//	sendFile(filepath, si);
		std::string sendString = msg.toString();
		si.send(sendString.size(), (Socket::byte*)sendString.c_str());
		Rslt::write("\n Server has sent the get reply to the client.");
	}</div> 
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv31.id, this.id)" type="button" value=" - " id="myButton31" /><div id="simplediv31" style="display:block; ">
		Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
	return true;
}</div>


bool sendFileToClient(string path,string FileName, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv32.id, this.id)" type="button" value=" - " id="myButton32" /><div id="simplediv32" style="display:block; ">
	try {
<input onclick="expand_collapse(simplediv33.id, this.id)" type="button" value=" - " id="myButton33" /><div id="simplediv33" style="display:block; ">
		HttpMessage sendMsg;
		std::string SrvrEndPoint = "localhost::8080";
		std::string ClientEndPoint = "localhost::8081";
		sendMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
		sendMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
		sendMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
		sendMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
		string FileHtmPath = path;
		FileHtmPath += '/' + FileName;
		Rslt::write("\n Html FilePath to be uploaded to client is :" + FileHtmPath);
		FileSystem::File file(FileHtmPath);
		file.open(FileSystem::File::in, FileSystem::File::binary);
		if (!file.isGood())
		{
<input onclick="expand_collapse(simplediv34.id, this.id)" type="button" value=" - " id="myButton34" /><div id="simplediv34" style="display:block; ">	Rslt::write("\n\n  can't open file " + FileHtmPath);
			return false;}</div>
		FileSystem::FileInfo fi(FileHtmPath);
		size_t fileSize = fi.size();
		std::string sizeString = Converter&lt;size_t&gt;::toString(fileSize);
		SocketSystem ss;SocketConnecter si;
		while (!si.connect("localhost", 8081))
		{
<input onclick="expand_collapse(simplediv35.id, this.id)" type="button" value=" - " id="myButton35" /><div id="simplediv35" style="display:block; ">	Rslt::write("\n Server waiting to connect");
			::Sleep(100);}</div>
		sendMsg.addAttribute(HttpMessage::Attribute("messageType", "HtmFileContentReplyFromServer"));
		sendMsg.addAttribute(HttpMessage::Attribute("fileName", FileName));
		sendMsg.addAttribute(HttpMessage::Attribute("content-length", sizeString));
		std::string sendString = sendMsg.toString();
		si.send(sendString.size(), (Socket::byte*)sendString.c_str());
		/* Now send the file content */
		const size_t BlockSize = 2048;
		Socket::byte buffer[BlockSize];
		while (true)
		{
<input onclick="expand_collapse(simplediv36.id, this.id)" type="button" value=" - " id="myButton36" /><div id="simplediv36" style="display:block; ">	FileSystem::Block blk = file.getBlock(BlockSize);
			if (blk.size() == 0)
				break;
			for (size_t i = 0; i &lt; blk.size(); ++i)
				buffer[i] = blk[i];
			si.send(blk.size(), buffer);
			if (!file.isGood())
				break;}</div>
		file.close();
		cout &lt;&lt; "Requirement 8 is met: Sent the file : " &lt;&lt; FileHtmPath &lt;&lt; " through stream of 2048 bytes each ";
		Rslt::write("\n\n File : " + FileHtmPath + " content was sent to the client successfully");
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv37.id, this.id)" type="button" value=" - " id="myButton37" /><div id="simplediv37" style="display:block; ">	Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);}</div>
	return true;}</div>

bool SendDependencyFilesToClient(string FileName,int argc,char* argv[]) {
<input onclick="expand_collapse(simplediv38.id, this.id)" type="button" value=" - " id="myButton38" /><div id="simplediv38" style="display:block; ">
	Utilities::StringHelper::Title("Demonstrating Requirement :Lazy DownLoad Strategy");
	try {
<input onclick="expand_collapse(simplediv39.id, this.id)" type="button" value=" - " id="myButton39" /><div id="simplediv39" style="display:block; ">
		if (CodeAnalysisExecutive::depmapforlazyloading.size() &lt;= 1) {
<input onclick="expand_collapse(simplediv40.id, this.id)" type="button" value=" - " id="myButton40" /><div id="simplediv40" style="display:block; ">
			runCodeAnalyzerOnServer(argc, argv);
		}</div>
		unordered_map&lt;std::string, std::set&lt;std::string&gt;&gt;::iterator it = CodeAnalysisExecutive::depmapforlazyloading.begin();
		for (it; it != CodeAnalysisExecutive::depmapforlazyloading.end(); it++) {
<input onclick="expand_collapse(simplediv41.id, this.id)" type="button" value=" - " id="myButton41" /><div id="simplediv41" style="display:block; ">
			string fileStringFromItr = it-&gt;first;
			std::string fileName_ = fileStringFromItr.substr(fileStringFromItr.find_last_of("\\") + 1);
			if (fileName_.compare(FileName) == 0) {
<input onclick="expand_collapse(simplediv42.id, this.id)" type="button" value=" - " id="myButton42" /><div id="simplediv42" style="display:block; ">
				set&lt;string&gt; valueOfMap = it-&gt;second;

				for (std::string str : it-&gt;second)
				{
<input onclick="expand_collapse(simplediv43.id, this.id)" type="button" value=" - " id="myButton43" /><div id="simplediv43" style="display:block; ">
					cout &lt;&lt; "File :" &lt;&lt; FileName &lt;&lt; "depends on " &lt;&lt; str &lt;&lt; endl;
					std::string dependFileNameOnly_ = str.substr(str.find_last_of("\\") + 1);
					cout &lt;&lt; "Trying to send the dependency file " &lt;&lt; dependFileNameOnly_ + ".htm" &lt;&lt; "to the client " &lt;&lt; endl;
					string FileHtmPath = argv[6];
					sendFileToClient(FileHtmPath,dependFileNameOnly_ + ".htm", argc, argv);
				}</div>
			}</div>
		}</div>
		Utilities::StringHelper::Title("Requirement 10 is met: Sent the depedency files to the client for Lazy DownLoad Strategy");
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv44.id, this.id)" type="button" value=" - " id="myButton44" /><div id="simplediv44" style="display:block; ">
		Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
	return true;
}</div>

void createDefaultSendMessageWithAttributes(HttpMessage &msg) {
<input onclick="expand_collapse(simplediv45.id, this.id)" type="button" value=" - " id="myButton45" /><div id="simplediv45" style="display:block; ">

}</div>
void processGetMessageforGetCategories(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv46.id, this.id)" type="button" value=" - " id="myButton46" /><div id="simplediv46" style="display:block; ">

	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	Rslt::write("\nServer needs to process the GetCategories message: \n");
	vector&lt;std::string&gt; getAllCategoriesList = FileSystem::Directory::getDirectories(argv[1]);
	//for (vector&lt;std::string&gt;::iterator it = getAllCategoriesList.begin(); it != getAllCategoriesList.end(); it++)
	for (int i = 0; i &lt;getAllCategoriesList.size(); i++)
	{
<input onclick="expand_collapse(simplediv47.id, this.id)" type="button" value=" - " id="myButton47" /><div id="simplediv47" style="display:block; ">
		//	cout &lt;&lt; "Directory found " &lt;&lt; *it &lt;&lt; " \n";
		if ((getAllCategoriesList[i] != ".") && (getAllCategoriesList[i] != ".."))
		{
<input onclick="expand_collapse(simplediv48.id, this.id)" type="button" value=" - " id="myButton48" /><div id="simplediv48" style="display:block; ">
			sendResult += getAllCategoriesList[i];
			if (i != getAllCategoriesList.size() - 1)
			{
<input onclick="expand_collapse(simplediv49.id, this.id)" type="button" value=" - " id="myButton49" /><div id="simplediv49" style="display:block; ">
				sendResult += ",";
			}</div>
		}</div>
	}</div>
	sndMsg.addAttribute(HttpMessage::Attribute("messageType", "getCategoriesReply"));
	if (sendResult.size() &gt; 0)
	{
<input onclick="expand_collapse(simplediv50.id, this.id)" type="button" value=" - " id="myButton50" /><div id="simplediv50" style="display:block; ">
		sndMsg.addAttribute(HttpMessage::attribute("content-length", Converter&lt;size_t&gt;::toString(sendResult.size())));
		sndMsg.addBody(sendResult); /* We add message body after all atributes are added for client
									to get the body based on content-length attribute */
	}</div>
	getAllCategoriesList.clear();
	Utilities::StringHelper::Title("\n Requirement 8 is met: The HTTP response to be sent from the server end " + sndMsg.toString());
	Rslt::write("\nMessage to be sent is " + sndMsg.toString());
	sendFinalMessageToClient(sndMsg);
}</div>


void processGetMessageForGetFileNamesFromServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv51.id, this.id)" type="button" value=" - " id="myButton51" /><div id="simplediv51" style="display:block; ">
	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	Rslt::write("\nServer needs to process the GetFiles message: \n");
	string searchCategoryPath = argv[1];
	searchCategoryPath += "/" + msg.findValue("FileCategory");
	std::cout &lt;&lt; "\n The argv[1] is: " &lt;&lt; argv[1] &lt;&lt; endl;
	std::cout &lt;&lt; "\n The searchCategoryPath is: " &lt;&lt; searchCategoryPath &lt;&lt; endl;
	vector&lt;std::string&gt; getAllFilesList = FileSystem::Directory::getFiles(searchCategoryPath, "*.*");
	//	for (vector&lt;std::string&gt;::iterator it = getAllFilesList.begin();it != getAllFilesList.end(); it++)
	for (int i = 0; i &lt; getAllFilesList.size(); i++)
	{
<input onclick="expand_collapse(simplediv52.id, this.id)" type="button" value=" - " id="myButton52" /><div id="simplediv52" style="display:block; ">
		cout &lt;&lt; "File found " &lt;&lt; getAllFilesList[i] &lt;&lt; " \n";
		/*if ((*it != ".") && (*it != ".."))
		{
<input onclick="expand_collapse(simplediv53.id, this.id)" type="button" value=" - " id="myButton53" /><div id="simplediv53" style="display:block; ">*/
		sendResult += getAllFilesList[i];
		if (i != getAllFilesList.size() - 1)
		{
<input onclick="expand_collapse(simplediv54.id, this.id)" type="button" value=" - " id="myButton54" /><div id="simplediv54" style="display:block; ">
			sendResult += ",";
		}</div>
		//	}</div>
	}</div>
	sndMsg.addAttribute(HttpMessage::Attribute("messageType", "getFileNamesReply"));
	if (sendResult.size() &gt; 0)
	{
<input onclick="expand_collapse(simplediv55.id, this.id)" type="button" value=" - " id="myButton55" /><div id="simplediv55" style="display:block; ">
		sndMsg.addAttribute(HttpMessage::attribute("content-length", Converter&lt;size_t&gt;::toString(sendResult.size())));
		sndMsg.addBody(sendResult); /* We add message body after all atributes are added for client
									to get the body based on content-length attribute */
	}</div>
	getAllFilesList.clear();
	Rslt::write("\nMessage to be sent is " + sndMsg.toString());
	sendFinalMessageToClient(sndMsg);
}</div>

void processGetMessageFordownloadHtmFileFromServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv56.id, this.id)" type="button" value=" - " id="myButton56" /><div id="simplediv56" style="display:block; ">

	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	size_t contentSize;
	try {
<input onclick="expand_collapse(simplediv57.id, this.id)" type="button" value=" - " id="myButton57" /><div id="simplediv57" style="display:block; ">
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		if (contentSize &gt; 0) {
<input onclick="expand_collapse(simplediv58.id, this.id)" type="button" value=" - " id="myButton58" /><div id="simplediv58" style="display:block; ">
			Socket::byte* buffer = new Socket::byte[contentSize + 1];
			msg.getBody(buffer, contentSize);
			buffer[contentSize] = '\0';
			string getMsgBody = buffer;
			delete[] buffer;
			if (getMsgBody.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv59.id, this.id)" type="button" value=" - " id="myButton59" /><div id="simplediv59" style="display:block; ">
				string FirstDollarSplit = getMsgBody.substr(getMsgBody.find('$') + 1);
				if (FirstDollarSplit.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv60.id, this.id)" type="button" value=" - " id="myButton60" /><div id="simplediv60" style="display:block; ">
					string CategoryName = FirstDollarSplit.substr(0, FirstDollarSplit.find('$'));
					string FileName = FirstDollarSplit.substr(FirstDollarSplit.find('$') + 1);
					Rslt::write("\nServer needs to get File HTML content = " + FileName + " Category = " + CategoryName +
						" message request from the client: \n");
					//javascriptPath_ += "../javascript.js";
					//sendFileToClient(javascriptPath_, sndMsg, argc, argv);
					string FileHtmPath = argv[6];
					sendFileToClient(FileHtmPath, FileName + ".htm", argc, argv);
					SendDependencyFilesToClient(FileName, argc, argv);
				}</div>
			}</div>
		}</div>
	}</div>


	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv61.id, this.id)" type="button" value=" - " id="myButton61" /><div id="simplediv61" style="display:block; ">
		Rslt::write("\n  Exeception caught in the method deleteSingleFileOnServer: \n");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
}</div>


bool processGetMessages(HttpMessage &msg, int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv62.id, this.id)" type="button" value=" - " id="myButton62" /><div id="simplediv62" style="display:block; ">
	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	if (msg.findValue("messageType") != "")
	{
<input onclick="expand_collapse(simplediv63.id, this.id)" type="button" value=" - " id="myButton63" /><div id="simplediv63" style="display:block; ">
		if (msg.findValue("messageType").compare("getCategories") == 0)
		{
<input onclick="expand_collapse(simplediv64.id, this.id)" type="button" value=" - " id="myButton64" /><div id="simplediv64" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the File Categories to the client");
			processGetMessageforGetCategories(msg, argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("getFileNamesFromServer") == 0)
		{
<input onclick="expand_collapse(simplediv65.id, this.id)" type="button" value=" - " id="myButton65" /><div id="simplediv65" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the File Names with in category to the client");
			processGetMessageForGetFileNamesFromServer(msg,argc,argv);
		}</div>
		else if (msg.findValue("messageType").compare("downloadHtmFileFromServer") == 0) {
<input onclick="expand_collapse(simplediv66.id, this.id)" type="button" value=" - " id="myButton66" /><div id="simplediv66" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the Html and dependent files to the client");
			processGetMessageFordownloadHtmFileFromServer(msg, argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("downloadJsAndCssFromServer") == 0) {
<input onclick="expand_collapse(simplediv67.id, this.id)" type="button" value=" - " id="myButton67" /><div id="simplediv67" style="display:block; ">
			cout &lt;&lt; "\n Repository::processGetMessages::Request for download js and css files came from Client" &lt;&lt; endl;
			string FileHtmPath="../";
			string JsFileName="javascript.js";
			string CSSFileName = "stylesheet.css";
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the JSS and CSS files to Client");
			sendFileToClient(FileHtmPath, JsFileName, argc, argv);
			sendFileToClient(FileHtmPath, CSSFileName, argc, argv);
			Utilities::StringHelper::Title("Requirement 5 is met: Sent the js and css files to the client");
		}</div>
	}</div>
	return true;
}</div>



void deleteSingleFileOnServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv68.id, this.id)" type="button" value=" - " id="myButton68" /><div id="simplediv68" style="display:block; ">
	Rslt::write("\nServer needs to process the delete message request from the client: \n");
	size_t contentSize = 0;
	HttpMessage replyMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	replyMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	replyMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	replyMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	replyMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	try {
<input onclick="expand_collapse(simplediv69.id, this.id)" type="button" value=" - " id="myButton69" /><div id="simplediv69" style="display:block; ">
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		if (contentSize &gt; 0) {
<input onclick="expand_collapse(simplediv70.id, this.id)" type="button" value=" - " id="myButton70" /><div id="simplediv70" style="display:block; ">
			Socket::byte* buffer = new Socket::byte[contentSize + 1];
			msg.getBody(buffer, contentSize);
			buffer[contentSize] = '\0';
			string getMsgBody = buffer;
			delete[] buffer;
			if (getMsgBody.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv71.id, this.id)" type="button" value=" - " id="myButton71" /><div id="simplediv71" style="display:block; ">
				string FirstDollarSplit = getMsgBody.substr(getMsgBody.find('$') + 1);
				if (FirstDollarSplit.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv72.id, this.id)" type="button" value=" - " id="myButton72" /><div id="simplediv72" style="display:block; ">
					string CategoryName = FirstDollarSplit.substr(0, FirstDollarSplit.find('$'));
					string FileName = FirstDollarSplit.substr(FirstDollarSplit.find('$') + 1);
					Rslt::write("\nServer needs to delete File = " + FileName + " Category = " + CategoryName +
						" message request from the client: \n");
					string FileDeletePath = argv[1];
					FileDeletePath += '/' + CategoryName + '/' + FileName;
					Rslt::write("\n FilePath to be deleted is :" + FileDeletePath);
					if (FileSystem::File::exists(FileDeletePath)) {
<input onclick="expand_collapse(simplediv73.id, this.id)" type="button" value=" - " id="myButton73" /><div id="simplediv73" style="display:block; ">
						FileSystem::File::remove(FileDeletePath);
					}</div>
				}</div>
			}</div>
		}</div>
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv74.id, this.id)" type="button" value=" - " id="myButton74" /><div id="simplediv74" style="display:block; ">
		Rslt::write("\n  Exeception caught in the method deleteSingleFileOnServer: \n");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
}</div>

bool processPostMessages(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv75.id, this.id)" type="button" value=" - " id="myButton75" /><div id="simplediv75" style="display:block; ">
	cout&lt;&lt;"\nServer needs to process the Post message request from the client: \n"&lt;&lt;endl;
	if (msg.findValue("messageType") != "")
	{
<input onclick="expand_collapse(simplediv76.id, this.id)" type="button" value=" - " id="myButton76" /><div id="simplediv76" style="display:block; ">
		if (msg.findValue("messageType").compare("runCodeAnalyzer") == 0) {
<input onclick="expand_collapse(simplediv77.id, this.id)" type="button" value=" - " id="myButton77" /><div id="simplediv77" style="display:block; ">
			cout &lt;&lt; "\nServer needs to process the runCodeAnalyzer message request from the client: \n";
			runCodeAnalyzerOnServer(argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("deleteFileFromServer") == 0) {
<input onclick="expand_collapse(simplediv78.id, this.id)" type="button" value=" - " id="myButton78" /><div id="simplediv78" style="display:block; ">
			deleteSingleFileOnServer(msg, argc, argv);
		}</div>
	}</div>
	return true;
}</div>


HttpMessage ClientHandler::readMessageForPost(HttpMessage& msg, Socket& socket) {
<input onclick="expand_collapse(simplediv79.id, this.id)" type="button" value=" - " id="myButton79" /><div id="simplediv79" style="display:block; ">

	std::string filename = msg.findValue("file");
	if (filename != "")
	{
<input onclick="expand_collapse(simplediv80.id, this.id)" type="button" value=" - " id="myButton80" /><div id="simplediv80" style="display:block; ">
		size_t contentSize;
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		else
			return msg;

		std::string getDir = msg.findValue("directory");

		readFile(filename, contentSize, getDir, socket);
	}</div>

	if (filename != "")
	{
<input onclick="expand_collapse(simplediv81.id, this.id)" type="button" value=" - " id="myButton81" /><div id="simplediv81" style="display:block; ">
		msg.removeAttribute("content-length");
		std::string bodyString = "&lt;file&gt;" + filename + "&lt;/file&gt;";
		std::string sizeString = Converter&lt;size_t&gt;::toString(bodyString.size());
		msg.addAttribute(HttpMessage::Attribute("content-length", sizeString));
		msg.addBody(bodyString);
	}</div>
	else
	{
<input onclick="expand_collapse(simplediv82.id, this.id)" type="button" value=" - " id="myButton82" /><div id="simplediv82" style="display:block; ">
		size_t numBytes = 0;
		size_t pos = msg.findAttribute("content-length");
		if (pos &lt; msg.attributes().size())
		{
<input onclick="expand_collapse(simplediv83.id, this.id)" type="button" value=" - " id="myButton83" /><div id="simplediv83" style="display:block; ">
			numBytes = Converter&lt;size_t&gt;::toValue(msg.attributes()[pos].second);
			Socket::byte* buffer = new Socket::byte[numBytes + 1];
			socket.recv(numBytes, buffer);
			buffer[numBytes] = '\0';
			std::string msgBody(buffer);
			msg.addBody(msgBody);
			delete[] buffer;
		}</div>
	}</div>

	return msg;
}</div>

//----&lt; this defines processing to frame messages &gt;------------------

HttpMessage ClientHandler::readMessage(Socket& socket)
{
<input onclick="expand_collapse(simplediv84.id, this.id)" type="button" value=" - " id="myButton84" /><div id="simplediv84" style="display:block; ">  connectionClosed_ = false;
	HttpMessage msg;
	while (true)
	{
<input onclick="expand_collapse(simplediv85.id, this.id)" type="button" value=" - " id="myButton85" /><div id="simplediv85" style="display:block; ">
		std::string attribString = socket.recvString('\n');
		if (attribString.size() &gt; 1)
		{
<input onclick="expand_collapse(simplediv86.id, this.id)" type="button" value=" - " id="myButton86" /><div id="simplediv86" style="display:block; ">
			HttpMessage::Attribute attrib = HttpMessage::parseAttribute(attribString);
			msg.addAttribute(attrib);
		}</div>
		else
			break;
	}</div>
	if (msg.attributes().size() == 0)
	{
<input onclick="expand_collapse(simplediv87.id, this.id)" type="button" value=" - " id="myButton87" /><div id="simplediv87" style="display:block; ">
		connectionClosed_ = true;
		return msg;
	}</div>
	if (msg.attributes()[0].first == "POST")
		msg = readMessageForPost(msg, socket);
	else if (msg.attributes()[0].first == "GET") {
<input onclick="expand_collapse(simplediv88.id, this.id)" type="button" value=" - " id="myButton88" /><div id="simplediv88" style="display:block; ">
		std::string getMessageType = msg.findValue("messageType");
			size_t numBytes = 0;
			size_t pos = msg.findAttribute("content-length");
			if (pos &lt; msg.attributes().size())
			{
<input onclick="expand_collapse(simplediv89.id, this.id)" type="button" value=" - " id="myButton89" /><div id="simplediv89" style="display:block; ">
				numBytes = Converter&lt;size_t&gt;::toValue(msg.attributes()[pos].second);
				Socket::byte* buffer = new Socket::byte[numBytes + 1];
				socket.recv(numBytes, buffer);
				buffer[numBytes] = '\0';
				std::string msgBody(buffer);
				msg.addBody(msgBody);
				delete[] buffer;
			}</div>
	}</div>
	return msg;
}</div>
//----&lt; read a binary file from socket and save &gt;--------------------
/*
* This function expects the sender to have already send a file message,
* and when this function is running, continuosly send bytes until
* fileSize bytes have been sent.
*/
bool ClientHandler::readFile(const std::string& filename, size_t fileSize, 
	                         const std::string& getDir, Socket& socket)
{
<input onclick="expand_collapse(simplediv90.id, this.id)" type="button" value=" - " id="myButton90" /><div id="simplediv90" style="display:block; ">
	//std::string fqname = "../TestFiles_Client_Server/" + filename + ".snt";
  	std::string checkDirPath = path_+"/"+getDir; 
	if (FileSystem::Directory::exists(checkDirPath) == false)
	{
<input onclick="expand_collapse(simplediv91.id, this.id)" type="button" value=" - " id="myButton91" /><div id="simplediv91" style="display:block; ">
		FileSystem::Directory::create(checkDirPath);
	}</div>
	std::string fqname = path_ + "/" + getDir + "/" + filename;
	Rslt::write(" Trying to readFile: " + fqname + " \n");
	FileSystem::File file(fqname);
	file.open(FileSystem::File::out, FileSystem::File::binary);
	if (!file.isGood())
	{
<input onclick="expand_collapse(simplediv92.id, this.id)" type="button" value=" - " id="myButton92" /><div id="simplediv92" style="display:block; ">
		Rslt::write("\n\n  can't open file " + fqname);
		return false;
	}</div>

	const size_t BlockSize = 2048;
	Socket::byte buffer[BlockSize];
	size_t bytesToRead;
	while (true)
	{
<input onclick="expand_collapse(simplediv93.id, this.id)" type="button" value=" - " id="myButton93" /><div id="simplediv93" style="display:block; ">
		if (fileSize &gt; BlockSize)
			bytesToRead = BlockSize;
		else
			bytesToRead = fileSize;

		socket.recv(bytesToRead, buffer);

		FileSystem::Block blk;
		for (size_t i = 0; i &lt; bytesToRead; ++i)
			blk.push_back(buffer[i]);

		file.putBlock(blk);
		if (fileSize &lt; BlockSize)
			break;
		fileSize -= BlockSize;
	}</div>
	file.close();
	return true;
}</div>
//----&lt; receiver functionality is defined by this function &gt;---------

void ClientHandler::operator()(Socket socket)
{
<input onclick="expand_collapse(simplediv94.id, this.id)" type="button" value=" - " id="myButton94" /><div id="simplediv94" style="display:block; ">
	
	while (true)
	{
<input onclick="expand_collapse(simplediv95.id, this.id)" type="button" value=" - " id="myButton95" /><div id="simplediv95" style="display:block; ">
		HttpMessage msg = readMessage(socket);
	
		if (connectionClosed_ || msg.bodyString() == "quit")
		{
<input onclick="expand_collapse(simplediv96.id, this.id)" type="button" value=" - " id="myButton96" /><div id="simplediv96" style="display:block; ">
			Rslt::write("\n\n  clienthandler thread is terminating \n");
			break;
		}</div>
		//if (msg.toString().size() &gt; 5) {
<input onclick="expand_collapse(simplediv97.id, this.id)" type="button" value=" - " id="myButton97" /><div id="simplediv97" style="display:block; ">
		msgQ_.enQ(msg);
		//}</div>
	}</div>
}</div>

bool ClientHandler::ProcessCommandLine(int argc, char * argv[])
{
<input onclick="expand_collapse(simplediv98.id, this.id)" type="button" value=" - " id="myButton98" /><div id="simplediv98" style="display:block; ">
	
	try {
<input onclick="expand_collapse(simplediv99.id, this.id)" type="button" value=" - " id="myButton99" /><div id="simplediv99" style="display:block; ">
		path_ = FileSystem::Path::getFullFileSpec(argv[1]);
		if (!FileSystem::Directory::exists(path_))
		{
<input onclick="expand_collapse(simplediv100.id, this.id)" type="button" value=" - " id="myButton100" /><div id="simplediv100" style="display:block; ">
			std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
			return false;
		}</div>

	}</div>
	catch (std::exception& ex)
	{
<input onclick="expand_collapse(simplediv101.id, this.id)" type="button" value=" - " id="myButton101" /><div id="simplediv101" style="display:block; ">
		Utils::Title("\ncommand line argument parsing error:");
		std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
		return false;
	}</div>
	Rslt::write("\nInside ProcessCommandLine of ClientHandler");
	return true;
}</div>

//----&lt; initialize application specific FileMgr &gt;--------------------
/*
 * - Accepts CodeAnalysisExecutive's path and fileMap by reference
 */
AnalFileMgr::AnalFileMgr(const Path& path, FileMap& fileMap)
  : FileMgr(path), fileMap_(fileMap), numFiles_(0), numDirs_(0) {
<input onclick="expand_collapse(simplediv102.id, this.id)" type="button" value=" - " id="myButton102" /><div id="simplediv102" style="display:block; ">}</div>

//----&lt; override of FileMgr::file(...) to store found files &gt;------

void AnalFileMgr::file(const File& f)
{
<input onclick="expand_collapse(simplediv103.id, this.id)" type="button" value=" - " id="myButton103" /><div id="simplediv103" style="display:block; ">
  File fqf = d_ + "\\" + f;
  Ext ext = FileSystem::Path::getExt(fqf);
  Pattern p = "*." + ext;
  fileMap_[p].push_back(fqf);
  ++numFiles_;
}</div>
//----&lt; override of FileMgr::dir(...) to save current dir &gt;----------

void AnalFileMgr::dir(const Dir& d)
{
<input onclick="expand_collapse(simplediv104.id, this.id)" type="button" value=" - " id="myButton104" /><div id="simplediv104" style="display:block; ">
  d_ = d;
  ++numDirs_;
}</div>
//----&lt; override of FileMgr::done(), not currently used &gt;------------

void AnalFileMgr::done()
{
<input onclick="expand_collapse(simplediv105.id, this.id)" type="button" value=" - " id="myButton105" /><div id="simplediv105" style="display:block; ">
}</div>
//----&lt; returns number of matched files from search &gt;----------------

size_t AnalFileMgr::numFiles()
{
<input onclick="expand_collapse(simplediv106.id, this.id)" type="button" value=" - " id="myButton106" /><div id="simplediv106" style="display:block; ">
  return numFiles_;
}</div>

//----&lt; returns number of dirs searched &gt;----------------------------

size_t AnalFileMgr::numDirs()
{
<input onclick="expand_collapse(simplediv107.id, this.id)" type="button" value=" - " id="myButton107" /><div id="simplediv107" style="display:block; ">
  return numDirs_;
}</div>

/////////////////////////////////////////////////////////////////////
// CodeAnalysisExecutive class
// - 
using Path = std::string;
using Pattern = std::string;
using Patterns = std::vector&lt;Pattern&gt;;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
using ASTNodes = std::vector&lt;ASTNode*&gt;;
using FileToNodeCollection = std::vector&lt;std::pair&lt;File, ASTNode*&gt;&gt;;

std::unordered_map&lt;std::string, std::set&lt;std::string&gt;&gt; CodeAnalysisExecutive::depmapforlazyloading = {
<input onclick="expand_collapse(simplediv108.id, this.id)" type="button" value=" - " id="myButton108" /><div id="simplediv108" style="display:block; "> {
<input onclick="expand_collapse(simplediv109.id, this.id)" type="button" value=" - " id="myButton109" /><div id="simplediv109" style="display:block; ">}</div> }</div>;
//----&lt; initialize parser, get access to repository &gt;----------------

CodeAnalysisExecutive::CodeAnalysisExecutive()
{
<input onclick="expand_collapse(simplediv110.id, this.id)" type="button" value=" - " id="myButton110" /><div id="simplediv110" style="display:block; ">
  pParser_ = configure_.Build();
  if (pParser_ == nullptr)
  {
<input onclick="expand_collapse(simplediv111.id, this.id)" type="button" value=" - " id="myButton111" /><div id="simplediv111" style="display:block; ">
    throw std::exception("couldn't create parser");
  }</div>
  pRepo_ = Repository::getInstance();
}</div>

//----&lt; cleanup &gt;----------------------------------------------------

CodeAnalysisExecutive::~CodeAnalysisExecutive()
{
<input onclick="expand_collapse(simplediv112.id, this.id)" type="button" value=" - " id="myButton112" /><div id="simplediv112" style="display:block; ">
  /*
   *  Nothing to do:
   *  - pParser_ and pRepo_ point to objects that the configure_
   *    destructor will delete.
   *  - The AbstractSynTree object will cleanup its contents when
   *    it goes out of scope by deleting the root of the AST node
   *    tree.  
   *  - Each node deletes its children, so, again, nothing more 
   *    to do.
   *  - This is here to present these comments and to make this
   *    base destructor virtual.
   */
}</div>
//----&lt; usage message &gt;----------------------------------------------

void showUsage()
{
<input onclick="expand_collapse(simplediv113.id, this.id)" type="button" value=" - " id="myButton113" /><div id="simplediv113" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; "\n  Usage:";
  out &lt;&lt; "\n  Command Line Arguments are:";
  out &lt;&lt; "\n  - 1st: path to subdirectory containing files to analyze";
  out &lt;&lt; "\n  - remaining non-option arguments are file patterns, e.g., *.h and/or *.cpp, etc.";
  out &lt;&lt; "\n  - must have at least one file pattern to specify what to process";
  out &lt;&lt; "\n  - option arguments have the format \"\"/x\" , where x is one of the options:";
  out &lt;&lt; "\n    - m : display function metrics";
  out &lt;&lt; "\n    - s : display file sizes";
  out &lt;&lt; "\n    - a : display Abstract Syntax Tree";
  out &lt;&lt; "\n    - r : set logger to display results";
  out &lt;&lt; "\n    - d : set logger to display demo outputs";
  out &lt;&lt; "\n    - b : set logger to display debug outputs";
  out &lt;&lt; "\n    - f : write all logs to logfile.txt";
  out &lt;&lt; "\n  A metrics summary is always shown, independent of any options used or not used";
  out &lt;&lt; "\n\n";
  std::cout &lt;&lt; out.str();
  //Rslt::write(out.str());
  //Rslt::flush();
}</div>
//----&lt; show command line arguments &gt;--------------------------------

void CodeAnalysisExecutive::showCommandLineArguments(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv114.id, this.id)" type="button" value=" - " id="myButton114" /><div id="simplediv114" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; "\n     Path: \"" &lt;&lt; FileSystem::Path::getFullFileSpec(argv[1]) &lt;&lt; "\"\n     Args: ";
  for (int i = 2; i &lt; argc - 1; ++i)
    out &lt;&lt; argv[i] &lt;&lt; ", ";
  out &lt;&lt; argv[argc - 1];
  Rslt::write(out.str());
  Rslt::flush();
}</div>
//----&lt; handle command line arguments &gt;------------------------------
/*
* Arguments are:
* - path: possibly relative path to folder containing all analyzed code,
*   e.g., may be anywhere in the directory tree rooted at that path
* - patterns: one or more file patterns of the form *.h, *.cpp, and *.cs
* - options: /m (show metrics), /s (show file sizes), and /a (show AST)
*/
bool CodeAnalysisExecutive::ProcessCommandLine(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv115.id, this.id)" type="button" value=" - " id="myButton115" /><div id="simplediv115" style="display:block; ">
  if (argc &lt; 2)
  {
<input onclick="expand_collapse(simplediv116.id, this.id)" type="button" value=" - " id="myButton116" /><div id="simplediv116" style="display:block; ">
    showUsage();
    return false;
  }</div>
  try {
<input onclick="expand_collapse(simplediv117.id, this.id)" type="button" value=" - " id="myButton117" /><div id="simplediv117" style="display:block; ">
    path_ = FileSystem::Path::getFullFileSpec(argv[1]);
    if (!FileSystem::Directory::exists(path_))
    {
<input onclick="expand_collapse(simplediv118.id, this.id)" type="button" value=" - " id="myButton118" /><div id="simplediv118" style="display:block; ">
      std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
      return false;
    }</div>
    for (int i = 2; i &lt; argc; ++i)
    {
<input onclick="expand_collapse(simplediv119.id, this.id)" type="button" value=" - " id="myButton119" /><div id="simplediv119" style="display:block; ">
      if (argv[i][0] == '/')
        options_.push_back(argv[i][1]);
      else
        patterns_.push_back(argv[i]);
    }</div>
    if (patterns_.size() == 0)
    {
<input onclick="expand_collapse(simplediv120.id, this.id)" type="button" value=" - " id="myButton120" /><div id="simplediv120" style="display:block; ">
      showUsage();
      return false;
    }</div>
  }</div>
  catch (std::exception& ex)
  {
<input onclick="expand_collapse(simplediv121.id, this.id)" type="button" value=" - " id="myButton121" /><div id="simplediv121" style="display:block; ">
	Utils::Title("\ncommand line argument parsing error:");
    std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    return false;
  }</div>
  return true;
}</div>
//----&lt; returns path entered on command line &gt;-------------------

std::string CodeAnalysisExecutive::getAnalysisPath()
{
<input onclick="expand_collapse(simplediv122.id, this.id)" type="button" value=" - " id="myButton122" /><div id="simplediv122" style="display:block; ">
  return path_;
}</div>
//----&lt; returns reference to FileMap &gt;---------------------------
/*
 * Supports quickly finding all the files found with a give pattern
 */
FileMap& CodeAnalysisExecutive::getFileMap()
{
<input onclick="expand_collapse(simplediv123.id, this.id)" type="button" value=" - " id="myButton123" /><div id="simplediv123" style="display:block; ">
  return fileMap_;
}</div>
//----&lt; searches path for files matching specified patterns &gt;----
/*
 * - Searches entire diretory tree rooted at path_, evaluated 
 *   from a command line argument.
 * - Saves found files in FileMap.
 */
void CodeAnalysisExecutive::getSourceFiles()
{
<input onclick="expand_collapse(simplediv124.id, this.id)" type="button" value=" - " id="myButton124" /><div id="simplediv124" style="display:block; ">
  AnalFileMgr fm(path_, fileMap_);
  for (auto patt : patterns_)
    fm.addPattern(patt);
  fm.search();
  numFiles_ = fm.numFiles();
  numDirs_ = fm.numDirs();
}</div>

std::string CodeAnalysisExecutive::systemTime()
{
<input onclick="expand_collapse(simplediv125.id, this.id)" type="button" value=" - " id="myButton125" /><div id="simplediv125" style="display:block; ">
	time_t sysTime = time(&sysTime);
	char buffer[27];
	ctime_s(buffer, 27, &sysTime);
	buffer[24] = '\0';
	std::string temp(buffer);
	return temp;
}</div>

//----&lt; helper: is text a substring of str? &gt;--------------------

bool contains(const std::string& str, const std::string& text)
{
<input onclick="expand_collapse(simplediv126.id, this.id)" type="button" value=" - " id="myButton126" /><div id="simplediv126" style="display:block; ">
  if (str.find(text) &lt; str.length())
    return true;
  return false;
}</div>
//----&lt; retrieve from fileMap all files matching *.h &gt;-----------

std::vector&lt;File&gt;& CodeAnalysisExecutive::cppHeaderFiles()
{
<input onclick="expand_collapse(simplediv127.id, this.id)" type="button" value=" - " id="myButton127" /><div id="simplediv127" style="display:block; ">
  cppHeaderFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv128.id, this.id)" type="button" value=" - " id="myButton128" /><div id="simplediv128" style="display:block; ">
    if (contains(item.first, "*.h"))
    {
<input onclick="expand_collapse(simplediv129.id, this.id)" type="button" value=" - " id="myButton129" /><div id="simplediv129" style="display:block; ">
      for (auto file : item.second)
        cppHeaderFiles_.push_back(file);
    }</div>
  }</div>
  return cppHeaderFiles_;
}</div>

//----&lt; retrieve from fileMap all files matching *.cpp &gt;---------

std::vector&lt;File&gt;& CodeAnalysisExecutive::cppImplemFiles()
{
<input onclick="expand_collapse(simplediv130.id, this.id)" type="button" value=" - " id="myButton130" /><div id="simplediv130" style="display:block; ">
  cppImplemFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv131.id, this.id)" type="button" value=" - " id="myButton131" /><div id="simplediv131" style="display:block; ">
    if (contains(item.first, "*.cpp"))
    {
<input onclick="expand_collapse(simplediv132.id, this.id)" type="button" value=" - " id="myButton132" /><div id="simplediv132" style="display:block; ">
      for (auto file : item.second)
        cppImplemFiles_.push_back(file);
    }</div>
  }</div>
  return cppImplemFiles_;
}</div>
//----&lt; retrieve from fileMap all files matching *.cs &gt;----------

std::vector&lt;File&gt;& CodeAnalysisExecutive::csharpFiles()
{
<input onclick="expand_collapse(simplediv133.id, this.id)" type="button" value=" - " id="myButton133" /><div id="simplediv133" style="display:block; ">
  csharpFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv134.id, this.id)" type="button" value=" - " id="myButton134" /><div id="simplediv134" style="display:block; ">
    if (contains(item.first, "*.cs"))
    {
<input onclick="expand_collapse(simplediv135.id, this.id)" type="button" value=" - " id="myButton135" /><div id="simplediv135" style="display:block; ">
      for (auto file : item.second)
        csharpFiles_.push_back(file);
    }</div>
  }</div>
  return csharpFiles_;
}</div>
//----&lt; report number of Source Lines Of Code (SLOCs) &gt;----------

CodeAnalysisExecutive::Slocs CodeAnalysisExecutive::fileSLOCs(const File& file) 
{
<input onclick="expand_collapse(simplediv136.id, this.id)" type="button" value=" - " id="myButton136" /><div id="simplediv136" style="display:block; "> 
  return slocMap_[file];
}</div>
//----&lt; report number of files processed &gt;-----------------------

size_t CodeAnalysisExecutive::numFiles()
{
<input onclick="expand_collapse(simplediv137.id, this.id)" type="button" value=" - " id="myButton137" /><div id="simplediv137" style="display:block; ">
  return numFiles_;
}</div>
//----&lt; report number of directories searched &gt;------------------

size_t CodeAnalysisExecutive::numDirs()
{
<input onclick="expand_collapse(simplediv138.id, this.id)" type="button" value=" - " id="myButton138" /><div id="simplediv138" style="display:block; ">
  return numDirs_;
}</div>
//----&lt; show processing activity &gt;-------------------------------

void CodeAnalysisExecutive::showActivity(const File& file)
{
<input onclick="expand_collapse(simplediv139.id, this.id)" type="button" value=" - " id="myButton139" /><div id="simplediv139" style="display:block; ">
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count)
  {
<input onclick="expand_collapse(simplediv140.id, this.id)" type="button" value=" - " id="myButton140" /><div id="simplediv140" style="display:block; ">
    return in.substr(0, count);
  }</div>;

  if (Rslt::running())
  {
<input onclick="expand_collapse(simplediv141.id, this.id)" type="button" value=" - " id="myButton141" /><div id="simplediv141" style="display:block; ">
    std::cout &lt;&lt; std::left &lt;&lt; "\r     Processing file: " &lt;&lt; std::setw(80) &lt;&lt; trunc(file, 80);
  }</div>
}</div>

void CodeAnalysisExecutive::clearActivity()
{
<input onclick="expand_collapse(simplediv142.id, this.id)" type="button" value=" - " id="myButton142" /><div id="simplediv142" style="display:block; ">
  if (Rslt::running())
  {
<input onclick="expand_collapse(simplediv143.id, this.id)" type="button" value=" - " id="myButton143" /><div id="simplediv143" style="display:block; ">
    std::cout &lt;&lt; std::left &lt;&lt; "\r                      " &lt;&lt; std::setw(80) &lt;&lt; std::string(80,' ');
  }</div>
}</div>
//----&lt; parses code and saves results in AbstrSynTree &gt;--------------
/*
* - Processes C++ header files first to build AST with nodes for
*   all public classes and structs.
* - Then processes C++ implementation files.  Each member function
*   is relocated to its class scope node, not the local scope.
* - Therefore, this ordering is important.
* - C# code has all member functions inline, so we don't need to
*   do any relocation of nodes in the AST.  Therefore, that analysis
*   can be done at any time.
* - If you bore down into the analysis code in ActionsAndRules.h you
*   will find some gymnastics to handle template syntax.  That can
*   get somewhat complicated, so there may be some latent bugs there.
*   I don't know of any at this time.
*/
void CodeAnalysisExecutive::setLanguage(const File& file)
{
<input onclick="expand_collapse(simplediv144.id, this.id)" type="button" value=" - " id="myButton144" /><div id="simplediv144" style="display:block; ">
  std::string ext = FileSystem::Path::getExt(file);
  if (ext == "h" || ext == "cpp")
    pRepo_-&gt;language() = Language::Cpp;
  else if (ext == "cs")
    pRepo_-&gt;language() = Language::CSharp;
}</div>

void CodeAnalysisExecutive::processSourceCode(bool showProc)
{
<input onclick="expand_collapse(simplediv145.id, this.id)" type="button" value=" - " id="myButton145" /><div id="simplediv145" style="display:block; ">
  for (auto file : cppHeaderFiles())
  {
<input onclick="expand_collapse(simplediv146.id, this.id)" type="button" value=" - " id="myButton146" /><div id="simplediv146" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv147.id, this.id)" type="button" value=" - " id="myButton147" /><div id="simplediv147" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      Rslt::flush();
      continue;
    }</div>
    // parse file
    Rslt::flush();
    Demo::flush();
    Dbug::flush();

    if(!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if(!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::Cpp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
    {
<input onclick="expand_collapse(simplediv148.id, this.id)" type="button" value=" - " id="myButton148" /><div id="simplediv148" style="display:block; ">
      pParser_-&gt;parse();
    }</div>

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  for (auto file : cppImplemFiles())
  {
<input onclick="expand_collapse(simplediv149.id, this.id)" type="button" value=" - " id="myButton149" /><div id="simplediv149" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv150.id, this.id)" type="button" value=" - " id="myButton150" /><div id="simplediv150" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      Rslt::flush();
      continue;
    }</div>
    // parse file

    if (!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if (!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::Cpp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
      pParser_-&gt;parse();

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  for (auto file : csharpFiles())
  {
<input onclick="expand_collapse(simplediv151.id, this.id)" type="button" value=" - " id="myButton151" /><div id="simplediv151" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv152.id, this.id)" type="button" value=" - " id="myButton152" /><div id="simplediv152" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      continue;
    }</div>
    // parse file

    if (!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if (!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::CSharp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
      pParser_-&gt;parse();

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  if (showProc)
    clearActivity();
  std::ostringstream out;
  out &lt;&lt; std::left &lt;&lt; "\r  " &lt;&lt; std::setw(77) &lt;&lt; " ";
  Rslt::write(out.str());
}</div>
//----&lt; evaluate complexities of each AST node &gt;---------------------

void CodeAnalysisExecutive::complexityAnalysis()
{
<input onclick="expand_collapse(simplediv153.id, this.id)" type="button" value=" - " id="myButton153" /><div id="simplediv153" style="display:block; ">
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  CodeAnalysis::complexityEval(pGlobalScope);
}</div>
//----&lt; comparison functor for sorting FileToNodeCollection &gt;----
/*
* - supports stable sort on extension values
* - displayMetrics(...) uses to organize metrics display
*/
struct CompExts
{
<input onclick="expand_collapse(simplediv154.id, this.id)" type="button" value=" - " id="myButton154" /><div id="simplediv154" style="display:block; ">
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second)
  {
<input onclick="expand_collapse(simplediv155.id, this.id)" type="button" value=" - " id="myButton155" /><div id="simplediv155" style="display:block; ">
    return FileSystem::Path::getExt(first.first) &gt; FileSystem::Path::getExt(second.first);
  }</div>
}</div>;
//----&lt; comparison functor for sorting FileToNodeCollection &gt;----
/*
* - supports stable sort on name values
* - displayMetrics(...) uses these functions to organize metrics display
*/
static void removeExt(std::string& name)
{
<input onclick="expand_collapse(simplediv156.id, this.id)" type="button" value=" - " id="myButton156" /><div id="simplediv156" style="display:block; ">
  size_t extStartIndex = name.find_last_of('.');
  name = name.substr(0, extStartIndex);
}</div>

struct CompNames
{
<input onclick="expand_collapse(simplediv157.id, this.id)" type="button" value=" - " id="myButton157" /><div id="simplediv157" style="display:block; ">
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second)
  {
<input onclick="expand_collapse(simplediv158.id, this.id)" type="button" value=" - " id="myButton158" /><div id="simplediv158" style="display:block; ">
    std::string fnm = FileSystem::Path::getName(first.first);
    removeExt(fnm);
    std::string snm = FileSystem::Path::getName(second.first);
    removeExt(snm);
    return fnm &lt; snm;
  }</div>
}</div>;
//----&lt; display header line for displayMmetrics() &gt;------------------

void CodeAnalysisExecutive::displayHeader()
{
<input onclick="expand_collapse(simplediv159.id, this.id)" type="button" value=" - " id="myButton159" /><div id="simplediv159" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; std::right;
  out &lt;&lt; "\n ";
  out &lt;&lt; std::setw(25) &lt;&lt; "file name";
  out &lt;&lt; std::setw(12) &lt;&lt; "type";
  out &lt;&lt; std::setw(35) &lt;&lt; "name";
  out &lt;&lt; std::setw(8) &lt;&lt; "line";
  out &lt;&lt; std::setw(8) &lt;&lt; "size";
  out &lt;&lt; std::setw(8) &lt;&lt; "cplx";
  out &lt;&lt; std::right;
  out &lt;&lt; "\n  ";
  out &lt;&lt; std::setw(25) &lt;&lt; "-----------------------";
  out &lt;&lt; std::setw(12) &lt;&lt; "----------";
  out &lt;&lt; std::setw(35) &lt;&lt; "---------------------------------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  Rslt::write(out.str());
}</div>
//----&lt; display single line for displayMetrics() &gt;-------------------

void CodeAnalysisExecutive::displayMetricsLine(const File& file, ASTNode* pNode)
{
<input onclick="expand_collapse(simplediv160.id, this.id)" type="button" value=" - " id="myButton160" /><div id="simplediv160" style="display:block; ">
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count)
  {
<input onclick="expand_collapse(simplediv161.id, this.id)" type="button" value=" - " id="myButton161" /><div id="simplediv161" style="display:block; ">
    return in.substr(0, count);
  }</div>;
  std::ostringstream out;
  out &lt;&lt; std::right;
  out &lt;&lt; "\n ";
  out &lt;&lt; std::setw(25) &lt;&lt; trunc(file, 23);
  out &lt;&lt; std::setw(12) &lt;&lt; pNode-&gt;type_;
  out &lt;&lt; std::setw(35) &lt;&lt; trunc(pNode-&gt;name_, 33);
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;startLineCount_;
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;endLineCount_ - pNode-&gt;startLineCount_ + 1;
  size_t debug1 = pNode-&gt;startLineCount_;
  size_t debug2 = pNode-&gt;endLineCount_;
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;complexity_;
  Rslt::write(out.str());
}</div>
//----&lt; display lines containing public data declaration &gt;-----------

std::string CodeAnalysisExecutive::showData(const Scanner::ITokCollection* pTc)
{
<input onclick="expand_collapse(simplediv162.id, this.id)" type="button" value=" - " id="myButton162" /><div id="simplediv162" style="display:block; ">
  std::string semiExpStr;
  for (size_t i=0; i&lt;pTc-&gt;length(); ++i)
    semiExpStr += (*pTc)[i] + " ";
  return semiExpStr;
}</div>

void CodeAnalysisExecutive::displayDataLines(ASTNode* pNode, bool isSummary)
{
<input onclick="expand_collapse(simplediv163.id, this.id)" type="button" value=" - " id="myButton163" /><div id="simplediv163" style="display:block; ">
  for (auto datum : pNode-&gt;decl_)
  {
<input onclick="expand_collapse(simplediv164.id, this.id)" type="button" value=" - " id="myButton164" /><div id="simplediv164" style="display:block; ">
    if (pNode-&gt;parentType_ == "namespace" || pNode-&gt;parentType_ == "class" || pNode-&gt;parentType_ == "struct")
    {
<input onclick="expand_collapse(simplediv165.id, this.id)" type="button" value=" - " id="myButton165" /><div id="simplediv165" style="display:block; ">
      if (pNode-&gt;type_ == "function" || pNode-&gt;parentType_ == "function")
        continue;
      if (datum.access_ == Access::publ && datum.declType_ == DeclType::dataDecl)
      {
<input onclick="expand_collapse(simplediv166.id, this.id)" type="button" value=" - " id="myButton166" /><div id="simplediv166" style="display:block; ">
        std::ostringstream out;
        out &lt;&lt; std::right;
        out &lt;&lt; "\n ";
        out &lt;&lt; std::setw(25) &lt;&lt; "public data:" &lt;&lt; " ";
        if (isSummary)
        {
<input onclick="expand_collapse(simplediv167.id, this.id)" type="button" value=" - " id="myButton167" /><div id="simplediv167" style="display:block; ">
          out &lt;&lt; datum.package_ &lt;&lt; " : " &lt;&lt; datum.line_ &lt;&lt; " - "
            &lt;&lt; pNode-&gt;type_ &lt;&lt; " " &lt;&lt; pNode-&gt;name_ &lt;&lt; "\n " &lt;&lt; std::setw(15) &lt;&lt; " ";
        }</div>
        out &lt;&lt; showData(datum.pTc);
        Rslt::write(out.str());
      }</div>
    }</div>
  }</div>
}</div>
//----&lt;  helper for displayMetrics() &gt;-------------------------------
/*
* - Breaking this out as a separate function allows application to
*   display metrics for a subset of the Abstract Syntax Tree
*/
void CodeAnalysisExecutive::displayMetrics(ASTNode* root)
{
<input onclick="expand_collapse(simplediv168.id, this.id)" type="button" value=" - " id="myButton168" /><div id="simplediv168" style="display:block; ">
  flushLogger();
  std::ostringstream out;
  out &lt;&lt; "Code Metrics - Start Line, Size (lines/code), and Complexity (number of scopes)";
  Utils::sTitle(out.str(), 3, 92, out, '=');
  out &lt;&lt; "\n";
  Rslt::write(out.str());

  std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) {
<input onclick="expand_collapse(simplediv169.id, this.id)" type="button" value=" - " id="myButton169" /><div id="simplediv169" style="display:block; ">
    if (
      pNode-&gt;type_ == "namespace" ||
      pNode-&gt;type_ == "function" ||
      pNode-&gt;type_ == "class" ||
      pNode-&gt;type_ == "interface" ||
      pNode-&gt;type_ == "struct" ||
      pNode-&gt;type_ == "lambda"
      )
      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode));
  }</div>;
  ASTWalkNoIndent(root, co);
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts());
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames());

  displayHeader();

  std::string prevFile;
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv170.id, this.id)" type="button" value=" - " id="myButton170" /><div id="simplediv170" style="display:block; ">
    if (item.first != prevFile)
    {
<input onclick="expand_collapse(simplediv171.id, this.id)" type="button" value=" - " id="myButton171" /><div id="simplediv171" style="display:block; ">
      Rslt::write("\n");
      displayHeader();
    }</div>
    displayMetricsLine(item.first, item.second);
    displayDataLines(item.second);
    prevFile = item.first;
  }</div>
  Rslt::write("\n");
}</div>
//----&lt; display metrics results of code analysis &gt;---------------

void CodeAnalysisExecutive::displayMetrics()
{
<input onclick="expand_collapse(simplediv172.id, this.id)" type="button" value=" - " id="myButton172" /><div id="simplediv172" style="display:block; ">
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  displayMetrics(pGlobalScope);
}</div>
//----&lt; walk tree of element nodes &gt;---------------------------------

template&lt;typename element&gt;
void TreeWalk(element* pItem, bool details = false)
{
<input onclick="expand_collapse(simplediv173.id, this.id)" type="button" value=" - " id="myButton173" /><div id="simplediv173" style="display:block; ">
  static std::string path;
  if (path != pItem-&gt;path_ && details == true)
  {
<input onclick="expand_collapse(simplediv174.id, this.id)" type="button" value=" - " id="myButton174" /><div id="simplediv174" style="display:block; ">
    path = pItem-&gt;path_;
    Rslt::write("\n" + path);
  }</div>
  static size_t indentLevel = 0;
  std::ostringstream out;
  out &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pItem-&gt;show();
  Rslt::write(out.str());
  auto iter = pItem-&gt;children_.begin();
  ++indentLevel;
  while (iter != pItem-&gt;children_.end())
  {
<input onclick="expand_collapse(simplediv175.id, this.id)" type="button" value=" - " id="myButton175" /><div id="simplediv175" style="display:block; ">
    TreeWalk(*iter);
    ++iter;
  }</div>
  --indentLevel;
}</div>
//----&lt; display the AbstrSynTree build in processSourceCode() &gt;------

void CodeAnalysisExecutive::displayAST()
{
<input onclick="expand_collapse(simplediv176.id, this.id)" type="button" value=" - " id="myButton176" /><div id="simplediv176" style="display:block; ">
  flushLogger();
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  Utils::title("Abstract Syntax Tree");
  TreeWalk(pGlobalScope);
  Rslt::write("\n");
}</div>
//----&lt; show functions with metrics exceeding specified limits &gt;-----

void CodeAnalysisExecutive::displayMetricSummary(size_t sMax, size_t cMax)
{
<input onclick="expand_collapse(simplediv177.id, this.id)" type="button" value=" - " id="myButton177" /><div id="simplediv177" style="display:block; ">
  flushLogger();
  std::ostringstream out;
  Utils::sTitle("Functions Exceeding Metric Limits and Public Data", 3, 92, out, '=');
  Rslt::write(out.str());
  displayHeader();

  if (fileNodes_.size() == 0)  // only build fileNodes_ if displayMetrics hasn't been called
  {
<input onclick="expand_collapse(simplediv178.id, this.id)" type="button" value=" - " id="myButton178" /><div id="simplediv178" style="display:block; ">
    std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) {
<input onclick="expand_collapse(simplediv179.id, this.id)" type="button" value=" - " id="myButton179" /><div id="simplediv179" style="display:block; ">
      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode));
    }</div>;
    ASTNode* pGlobalNamespace = pRepo_-&gt;getGlobalScope();
    ASTWalkNoIndent(pGlobalNamespace, co);
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts());
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames());
  }</div>
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv180.id, this.id)" type="button" value=" - " id="myButton180" /><div id="simplediv180" style="display:block; ">
    if (item.second-&gt;type_ == "function")
    {
<input onclick="expand_collapse(simplediv181.id, this.id)" type="button" value=" - " id="myButton181" /><div id="simplediv181" style="display:block; ">
      size_t size = item.second-&gt;endLineCount_ - item.second-&gt;startLineCount_ + 1;
      size_t cmpl = item.second-&gt;complexity_;
      if (size &gt; sMax || cmpl &gt; cMax)
        displayMetricsLine(item.first, item.second);
    }</div>
  }</div>
  Rslt::write("\n");
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv182.id, this.id)" type="button" value=" - " id="myButton182" /><div id="simplediv182" style="display:block; ">
    displayDataLines(item.second, true);
  }</div>
  Rslt::write("\n");
}</div>
//----&lt; comparison functor for sorting SLOC display &gt;----------------

struct compFiles
{
<input onclick="expand_collapse(simplediv183.id, this.id)" type="button" value=" - " id="myButton183" /><div id="simplediv183" style="display:block; ">
private:
  std::string ChangeFirstCharOfExt(const std::string& fileName) const
  {
<input onclick="expand_collapse(simplediv184.id, this.id)" type="button" value=" - " id="myButton184" /><div id="simplediv184" style="display:block; ">
    std::string temp = fileName;
    size_t pos = temp.find_last_of('.');
    if (pos &lt; temp.size() - 1)
      if (temp[pos + 1] == 'h')
        temp[pos + 1] = 'a';
    return temp;
  }</div>
public:
  bool operator()(const std::string& fileName1, const std::string& fileName2) const
  {
<input onclick="expand_collapse(simplediv185.id, this.id)" type="button" value=" - " id="myButton185" /><div id="simplediv185" style="display:block; ">
    return ChangeFirstCharOfExt(fileName1) &lt; ChangeFirstCharOfExt(fileName2);
  }</div>
}</div>;
//----&lt; show sizes of all the files processed &gt;----------------------

void CodeAnalysisExecutive::displaySlocs()
{
<input onclick="expand_collapse(simplediv186.id, this.id)" type="button" value=" - " id="myButton186" /><div id="simplediv186" style="display:block; ">
  flushLogger();
  Utils::sTitle("File Size - Source Lines of Code", 3, 92);
  size_t slocCount = 0;
  std::map&lt;std::string, size_t, compFiles&gt; fileColl;
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv187.id, this.id)" type="button" value=" - " id="myButton187" /><div id="simplediv187" style="display:block; ">
    for (auto file : item.second)
    {
<input onclick="expand_collapse(simplediv188.id, this.id)" type="button" value=" - " id="myButton188" /><div id="simplediv188" style="display:block; ">
      File fileName = FileSystem::Path::getName(file);
      fileColl[file] = slocMap_[fileName];
    }</div>
  }</div>
  for (auto fitem : fileColl)
  {
<input onclick="expand_collapse(simplediv189.id, this.id)" type="button" value=" - " id="myButton189" /><div id="simplediv189" style="display:block; ">
    std::ostringstream out;
    out &lt;&lt; "\n  " &lt;&lt; std::setw(8) &lt;&lt; fitem.second &lt;&lt; " : " &lt;&lt; fitem.first;
    Rslt::write(out.str());
    slocCount += fitem.second;
  }</div>
  std::ostringstream out;
  out &lt;&lt; "\n\n      Total line count = " &lt;&lt; slocCount &lt;&lt; "\n";
  Rslt::write(out.str());
  Rslt::write("\n");
}</div>
//----&lt; display analysis info based on command line options &gt;--------

void CodeAnalysisExecutive::dispatchOptionalDisplays()
{
<input onclick="expand_collapse(simplediv190.id, this.id)" type="button" value=" - " id="myButton190" /><div id="simplediv190" style="display:block; ">
  for (auto opt : options_)
  {
<input onclick="expand_collapse(simplediv191.id, this.id)" type="button" value=" - " id="myButton191" /><div id="simplediv191" style="display:block; ">
    switch (opt)
    {
<input onclick="expand_collapse(simplediv192.id, this.id)" type="button" value=" - " id="myButton192" /><div id="simplediv192" style="display:block; ">
    case 'm':
      displayMetrics();
      Rslt::start();
      break;
    case 'a':
      displayAST();
      Rslt::start();
      break;
    case 's':
      displaySlocs();
      Rslt::start();
      break;
    default:
      break;
    }</div>
  }</div>
}</div>
//----&lt; display analysis info based on command line options &gt;--------

void CodeAnalysisExecutive::setDisplayModes()
{
<input onclick="expand_collapse(simplediv193.id, this.id)" type="button" value=" - " id="myButton193" /><div id="simplediv193" style="display:block; ">
  for (auto opt : options_)
  {
<input onclick="expand_collapse(simplediv194.id, this.id)" type="button" value=" - " id="myButton194" /><div id="simplediv194" style="display:block; ">
    switch (opt)
    {
<input onclick="expand_collapse(simplediv195.id, this.id)" type="button" value=" - " id="myButton195" /><div id="simplediv195" style="display:block; ">
    case 'r':
      Rslt::start();
      break;
    case 'd':
      Demo::start();
      break;
    case 'b':
      Dbug::start();
      break;
    case 'f':
      setLogFile("logFile.txt");
      break;
    default:
      if (opt != 'a' && opt != 'b' && opt != 'd' && opt != 'f' && opt != 'm' && opt != 'r' && opt != 's')
      {
<input onclick="expand_collapse(simplediv196.id, this.id)" type="button" value=" - " id="myButton196" /><div id="simplediv196" style="display:block; ">
        std::cout &lt;&lt; "\n\n  unknown option " &lt;&lt; opt &lt;&lt; "\n\n";
      }</div>
    }</div>
  }</div>
}</div>
//----&lt; helper functions for managing application's logging &gt;--------

void CodeAnalysisExecutive::startLogger(std::ostream& out)
{
<input onclick="expand_collapse(simplediv197.id, this.id)" type="button" value=" - " id="myButton197" /><div id="simplediv197" style="display:block; ">
  Rslt::attach(&out);
  Demo::attach(&out);
  Dbug::attach(&out);

  // will start Demo and Dbug if  have options /d and /b

  setDisplayModes();
}</div>

void CodeAnalysisExecutive::flushLogger()
{
<input onclick="expand_collapse(simplediv198.id, this.id)" type="button" value=" - " id="myButton198" /><div id="simplediv198" style="display:block; ">
  Rslt::flush();
  Demo::flush();
  Dbug::flush();
}</div>

void CodeAnalysisExecutive::stopLogger()
{
<input onclick="expand_collapse(simplediv199.id, this.id)" type="button" value=" - " id="myButton199" /><div id="simplediv199" style="display:block; ">
  Rslt::flush();
  Demo::flush();
  Dbug::flush();
  Rslt::stop();
  Demo::stop();
  Dbug::stop();
}</div>
//----&lt; open file stream for logging &gt;-------------------------------
/*
*  - must come after CodeAnalysisExecutive::processCommandLine()
*  - must come before starting any of the loggers
*/
void CodeAnalysisExecutive::setLogFile(const File& file)
{
<input onclick="expand_collapse(simplediv200.id, this.id)" type="button" value=" - " id="myButton200" /><div id="simplediv200" style="display:block; ">
  std::string path = getAnalysisPath();
  path += "\\" + file;
  pLogStrm_ = new std::ofstream(path);
  if (pLogStrm_-&gt;good())
  {
<input onclick="expand_collapse(simplediv201.id, this.id)" type="button" value=" - " id="myButton201" /><div id="simplediv201" style="display:block; ">
    Rslt::attach(pLogStrm_);
    Demo::attach(pLogStrm_);
    Dbug::attach(pLogStrm_);
  }</div>
  else
    Rslt::write("\n  couldn't open logFile.txt for writing");
}</div>

#include &lt;fstream&gt;

void startHttpServer(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv202.id, this.id)" type="button" value=" - " id="myButton202" /><div id="simplediv202" style="display:block; ">
  Rslt::attach(&std::cout);
  Rslt::start();
  Rslt::title("\n  HttpMessage Server started");
  BlockingQueue&lt;HttpMessage&gt; msgQ;
  try
  {
<input onclick="expand_collapse(simplediv203.id, this.id)" type="button" value=" - " id="myButton203" /><div id="simplediv203" style="display:block; ">
	SocketSystem ss;
	SocketListener sl(8080, Socket::IP6);
	ClientHandler cp(msgQ);
	cp.ProcessCommandLine(argc, argv);
	sl.start(cp);
	 while (true)
	 {
<input onclick="expand_collapse(simplediv204.id, this.id)" type="button" value=" - " id="myButton204" /><div id="simplediv204" style="display:block; ">
		HttpMessage msg = msgQ.deQ();
		// if message type == "upload_files triggercodeAnalyzer.enq("upload success");
		Rslt::write("\n\n  server recvd message contents:\n" + msg.toString());
		if (msg.attributes().size() &gt; 0)
		{
<input onclick="expand_collapse(simplediv205.id, this.id)" type="button" value=" - " id="myButton205" /><div id="simplediv205" style="display:block; ">
			if (msg.attributes()[0].first == "GET")
			{
<input onclick="expand_collapse(simplediv206.id, this.id)" type="button" value=" - " id="myButton206" /><div id="simplediv206" style="display:block; ">
				processGetMessages(msg, argc, argv);
			}</div>
			else if (msg.attributes()[0].first == "POST")
			{
<input onclick="expand_collapse(simplediv207.id, this.id)" type="button" value=" - " id="myButton207" /><div id="simplediv207" style="display:block; ">
				processPostMessages(msg, argc, argv);
			}</div>
		}</div>
		Rslt::flush();
	 }</div>
   }</div>
   catch (std::exception& exc)
   {
<input onclick="expand_collapse(simplediv208.id, this.id)" type="button" value=" - " id="myButton208" /><div id="simplediv208" style="display:block; ">
	 Rslt::write("\n  Exeception caught: ");
	 std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
	 Rslt::write(exMsg);
   }</div>
}</div>

void receiver(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv209.id, this.id)" type="button" value=" - " id="myButton209" /><div id="simplediv209" style="display:block; ">
	try {
<input onclick="expand_collapse(simplediv210.id, this.id)" type="button" value=" - " id="myButton210" /><div id="simplediv210" style="display:block; ">
		startHttpServer(argc, argv);
	}</div>
	catch (std::exception& ex) {
<input onclick="expand_collapse(simplediv211.id, this.id)" type="button" value=" - " id="myButton211" /><div id="simplediv211" style="display:block; ">
		cout &lt;&lt; "Exception caught in receiver thread" &lt;&lt; endl;
		cout &lt;&lt; ex.what() &lt;&lt; endl;
	}</div>
}</div>
void displayCommandLineArgumentsHelp(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv212.id, this.id)" type="button" value=" - " id="myButton212" /><div id="simplediv212" style="display:block; ">
	Utilities::StringHelper::Title("Display Ambiguous Arguments meaning : \n");
	for (int i = 0; i &lt; argc; i++) {
<input onclick="expand_collapse(simplediv213.id, this.id)" type="button" value=" - " id="myButton213" /><div id="simplediv213" style="display:block; ">
		if (i == 1) {
<input onclick="expand_collapse(simplediv214.id, this.id)" type="button" value=" - " id="myButton214" /><div id="simplediv214" style="display:block; ">
			cout &lt;&lt; "Argument 1:" &lt;&lt; "To run CodeAnalyzer on the Repository folder :" &lt;&lt; argv[i] &lt;&lt; endl;
		}</div>
		if (i == 6) {
<input onclick="expand_collapse(simplediv215.id, this.id)" type="button" value=" - " id="myButton215" /><div id="simplediv215" style="display:block; ">
			cout &lt;&lt; "Argument 6:" &lt;&lt; "To store the HTML files published by CodePublisher :" &lt;&lt; argv[6] &lt;&lt; endl;
		}</div>
		if (i == 7) {
<input onclick="expand_collapse(simplediv216.id, this.id)" type="button" value=" - " id="myButton216" /><div id="simplediv216" style="display:block; ">
			cout &lt;&lt; "Argument 7:" &lt;&lt; "The physical path mapped to virtual Directory which also stores the HTML files in addition to local folder " &lt;&lt; argv[7] &lt;&lt; endl;
		}</div>
		if (i == 8) {
<input onclick="expand_collapse(simplediv217.id, this.id)" type="button" value=" - " id="myButton217" /><div id="simplediv217" style="display:block; ">
			cout &lt;&lt; "Argument 8" &lt;&lt; "The virtual Directory hosted by IIS is :" &lt;&lt; argv[8] &lt;&lt; " and maps to physical path : Argument 7 = " &lt;&lt; argv[7] &lt;&lt; endl;
		}</div>
	}</div>
}</div>

int main(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv218.id, this.id)" type="button" value=" - " id="myButton218" /><div id="simplediv218" style="display:block; ">	
	Utilities::StringHelper::Title("Requirement 2 : \n");
	Utilities::StringHelper::Title("Used C++ standard library's streams for all console I/O and new and delete for all heap-based memory management.");
	Utilities::StringHelper::Title("Requirement 9 : Starting the Test Executive to demonstarte all the project 4 requirments");
	displayCommandLineArgumentsHelp(argc, argv);
	std::thread receieverthread(receiver, argc, argv); 
  receieverthread.join();
  return 0;
}</div></pre>
</body>
</html>
