<html>
<head>
   <link rel = "stylesheet" href ="..\mystylesheet.css">
   <script src="..\myjsscript.js"></script>
</head>
<body>
<pre><hr /><div class="indent" >
<h4>Dependencies:</h4>
<a href=ParallelTypeAnal.h.htm>ParallelTypeAnal.h</a>
</div>
  <hr />
 <pre>
///////////////////////////////////////////////////////////////////////////
// Executive.cpp - Demonstrate Project2 Requirements                     //
// ver 1.4                                                               //
//-----------------------------------------------------------------      //
// Jim Fawcett (c) copyright 2016                                        //
// All rights granted provided this copyright notice is retained         //
//-----------------------------------------------------------------      //
// Language:    C++, Visual Studio 2015                                  //
// Platform:    Dell XPS 8900, Windows 10                                //
// Application: Project #2, CSE687 - Object Oriented Design, S2015       //
// Author:      Rishit Reddy Muthyala, Syracuse University, CST 4-187    //
//              rmuthyal@syr.edu                                         //
///////////////////////////////////////////////////////////////////////////

#include "Executive.h"
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;exception&gt;
#include &lt;iomanip&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;windows.h&gt;
#include &lt;shellapi.h&gt;
#include "../Parser/Parser.h"
#include "../FileSystem/FileSystem.h"
#include "../FileMgr/FileMgr.h"
#include "../Parser/ActionsAndRules.h"
#include "../Parser/ConfigureParser.h"
#include "../AbstractSyntaxTree/AbstrSynTree.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include "../DepthAnalysis/TypeAnalysis.h"
#include "../DependencyAnalysis/DependAnal.h"
#include "../Graph/Graph.h"
#include "../PublishCode/PublishCode.h"
using Rslt = Logging::StaticLogger&lt;0&gt;;  // use for application results
using Demo = Logging::StaticLogger&lt;1&gt;;  // use for demonstrations of processing
using Dbug = Logging::StaticLogger&lt;2&gt;;  // use for debug output
using namespace Utilities;
//using Rslt = Logging::StaticLogger&lt;1&gt;;
using namespace Async;
using namespace CodeAnalysis;
using namespace std;

/////////////////////////////////////////////////////////////////////
// AnalFileMgr class
// - Derives from FileMgr to make application specific file handler
//   by overriding FileMgr::file(), FileMgr::dir(), and FileMgr::done()

using Path = std::string;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;



class ClientHandler
{
<input onclick="expand_collapse(simplediv430.id, this.id)" type="button" value=" - " id="myButton430" /><div id="simplediv430" style="display:block; ">
public:
	using Path = std::string;
	using Pattern = std::string;
	using Patterns = std::vector&lt;Pattern&gt;;
	using File = std::string;
	using Files = std::vector&lt;File&gt;;
	using Ext = std::string;
	using Options = std::vector&lt;char&gt;;
	using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
	using Slocs = size_t;
	using SlocMap = std::unordered_map&lt;File, Slocs&gt;;
public:
	ClientHandler(BlockingQueue&lt;HttpMessage&gt;& msgQ) : msgQ_(msgQ) {
<input onclick="expand_collapse(simplediv431.id, this.id)" type="button" value=" - " id="myButton431" /><div id="simplediv431" style="display:block; ">}</div>
	void operator()(Socket socket);
	bool ProcessCommandLine(int argc, char* argv[]);
	HttpMessage readMessageForPost(HttpMessage& msg, Socket& socket);
private:
	bool connectionClosed_;
	HttpMessage readMessage(Socket& socket);
	bool readFile(const std::string& filename, size_t fileSize, const std::string& getDir, Socket& socket);
	BlockingQueue&lt;HttpMessage&gt;& msgQ_;
	Path path_;
}</div>;

/* This method is only used by runCodeAnalyzerOnServer to reduce the line count to 50 */
void OpenBrowserPagesToDemonstarteReq11(int argc, char * argv[]) {
<input onclick="expand_collapse(simplediv432.id, this.id)" type="button" value=" - " id="myButton432" /><div id="simplediv432" style="display:block; ">
	Utilities::StringHelper::Title("Demonstarting Requirement 11 is met: ");
	std::string path = argv[6];
	path += "/dependencyTable.htm";
	path = FileSystem::Path::getFullFileSpec(path);
	std::wstring sPath(path.begin(), path.end());
	Utilities::StringHelper::Title("Trying to open the dependency Files in the local folder");
	ShellExecute(NULL, L"open", sPath.c_str(), NULL, NULL, SW_SHOWNORMAL);
	std::string path1 = argv[8];
	path1 += "/dependencyTable.htm";
	std::wstring sPath1(path1.begin(), path1.end());
	Utilities::StringHelper::Title("Trying to open the dependency Files on the IIS virtula Directory folder");
	ShellExecute(NULL, L"open", sPath1.c_str(), NULL, NULL, SW_SHOWNORMAL);
	Utilities::StringHelper::Title("End of Requirement 11 Demonstation");
}</div>

int runCodeAnalyzerOnServer(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv433.id, this.id)" type="button" value=" - " id="myButton433" /><div id="simplediv433" style="display:block; ">
	using namespace CodeAnalysis;
	CodeAnalysisExecutive exec;
	try {
<input onclick="expand_collapse(simplediv434.id, this.id)" type="button" value=" - " id="myButton434" /><div id="simplediv434" style="display:block; ">
		bool succeeded = exec.ProcessCommandLine(argc, argv);
		exec.setDisplayModes();
		exec.startLogger(std::cout);
		std::ostringstream tOut("CodeAnalysis");
		Utils::sTitle(tOut.str(), 3, 92, tOut, '=');
		Rslt::write(tOut.str());
		Rslt::write("\n     " + exec.getAnalysisPath());
		Rslt::write("\n     " + exec.systemTime());
		Rslt::flush();
		exec.showCommandLineArguments(argc, argv);
		Rslt::write("\n");
		exec.getSourceFiles();
		exec.processSourceCode(true);
		std::ostringstream out;
		out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "searched" &lt;&lt; std::setw(6) &lt;&lt; exec.numDirs() &lt;&lt; " dirs";
		out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "processed" &lt;&lt; std::setw(6) &lt;&lt; exec.numFiles() &lt;&lt; " files";
		Rslt::write(out.str());
		exec.stopLogger();
		putline();
		TypeAnal ta;
		ta.doTypeAnal();
		ta.displayTypeTable();
		DependAnal dan;
		dan.ProcessCommandLine(argc, argv);
		dan.getSourceFiles();
		dan.processSourceCode();
		CodeAnalysisExecutive::depmapforlazyloading = dan.getDependencyTable();
		Utilities::StringHelper::Title("Demonstarting Requirement 4: Start of Code Publisher of Project 3 ");
		CodePublisher cp(dan.getDependencyTable());
		cp.ProcessCommandLine(argc, argv);
		cp.getSourceFiles();
		cp.displayDependencies();
		cp.demonstrateReq4();
		cp.processSourceCode();
		//Utilities::StringHelper::Title("End of Requirement 4:  Code Publisher has published all the source code to HTML content and stylings included");
		OpenBrowserPagesToDemonstarteReq11(argc, argv);
	}</div>
	catch (std::exception& except)
	{
<input onclick="expand_collapse(simplediv435.id, this.id)" type="button" value=" - " id="myButton435" /><div id="simplediv435" style="display:block; ">
		exec.flushLogger();
		std::cout &lt;&lt; "\n\n  caught exception in Executive::main: " + std::string(except.what()) + "\n\n";
		exec.stopLogger();
		return 1;
	}</div>
	return 0;
}</div>

//----&lt;this defines the processing of Get Requests and send the reply to the client &gt;----------

bool sendFinalMessageToClient(HttpMessage &msg)
{
<input onclick="expand_collapse(simplediv436.id, this.id)" type="button" value=" - " id="myButton436" /><div id="simplediv436" style="display:block; ">
	try
	{
<input onclick="expand_collapse(simplediv437.id, this.id)" type="button" value=" - " id="myButton437" /><div id="simplediv437" style="display:block; ">
		SocketSystem ss;
		SocketConnecter si;
		while (!si.connect("localhost", 8081))
		{
<input onclick="expand_collapse(simplediv438.id, this.id)" type="button" value=" - " id="myButton438" /><div id="simplediv438" style="display:block; ">
			Rslt::write("\n Server waiting to connect");
			::Sleep(100);
		}</div>
	//	sendFile(filepath, si);
		std::string sendString = msg.toString();
		si.send(sendString.size(), (Socket::byte*)sendString.c_str());
		Rslt::write("\n Server has sent the get reply to the client.");
	}</div> 
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv439.id, this.id)" type="button" value=" - " id="myButton439" /><div id="simplediv439" style="display:block; ">
		Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
	return true;
}</div>


bool sendFileToClient(string path,string FileName, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv440.id, this.id)" type="button" value=" - " id="myButton440" /><div id="simplediv440" style="display:block; ">
	try {
<input onclick="expand_collapse(simplediv441.id, this.id)" type="button" value=" - " id="myButton441" /><div id="simplediv441" style="display:block; ">
		HttpMessage sendMsg;
		std::string SrvrEndPoint = "localhost::8080";
		std::string ClientEndPoint = "localhost::8081";
		sendMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
		sendMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
		sendMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
		sendMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
		string FileHtmPath = path;
		FileHtmPath += '/' + FileName;
		Rslt::write("\n Html FilePath to be uploaded to client is :" + FileHtmPath);
		FileSystem::File file(FileHtmPath);
		file.open(FileSystem::File::in, FileSystem::File::binary);
		if (!file.isGood())
		{
<input onclick="expand_collapse(simplediv442.id, this.id)" type="button" value=" - " id="myButton442" /><div id="simplediv442" style="display:block; ">	Rslt::write("\n\n  can't open file " + FileHtmPath);
			return false;}</div>
		FileSystem::FileInfo fi(FileHtmPath);
		size_t fileSize = fi.size();
		std::string sizeString = Converter&lt;size_t&gt;::toString(fileSize);
		SocketSystem ss;SocketConnecter si;
		while (!si.connect("localhost", 8081))
		{
<input onclick="expand_collapse(simplediv443.id, this.id)" type="button" value=" - " id="myButton443" /><div id="simplediv443" style="display:block; ">	Rslt::write("\n Server waiting to connect");
			::Sleep(100);}</div>
		sendMsg.addAttribute(HttpMessage::Attribute("messageType", "HtmFileContentReplyFromServer"));
		sendMsg.addAttribute(HttpMessage::Attribute("fileName", FileName));
		sendMsg.addAttribute(HttpMessage::Attribute("content-length", sizeString));
		std::string sendString = sendMsg.toString();
		si.send(sendString.size(), (Socket::byte*)sendString.c_str());
		/* Now send the file content */
		const size_t BlockSize = 2048;
		Socket::byte buffer[BlockSize];
		while (true)
		{
<input onclick="expand_collapse(simplediv444.id, this.id)" type="button" value=" - " id="myButton444" /><div id="simplediv444" style="display:block; ">	FileSystem::Block blk = file.getBlock(BlockSize);
			if (blk.size() == 0)
				break;
			for (size_t i = 0; i &lt; blk.size(); ++i)
				buffer[i] = blk[i];
			si.send(blk.size(), buffer);
			if (!file.isGood())
				break;}</div>
		file.close();
		cout &lt;&lt; "Requirement 8 is met: Sent the file : " &lt;&lt; FileHtmPath &lt;&lt; " through stream of 2048 bytes each ";
		Rslt::write("\n\n File : " + FileHtmPath + " content was sent to the client successfully");
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv445.id, this.id)" type="button" value=" - " id="myButton445" /><div id="simplediv445" style="display:block; ">	Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);}</div>
	return true;}</div>

bool SendDependencyFilesToClient(string FileName,int argc,char* argv[]) {
<input onclick="expand_collapse(simplediv446.id, this.id)" type="button" value=" - " id="myButton446" /><div id="simplediv446" style="display:block; ">
	Utilities::StringHelper::Title("Demonstrating Requirement :Lazy DownLoad Strategy");
	try {
<input onclick="expand_collapse(simplediv447.id, this.id)" type="button" value=" - " id="myButton447" /><div id="simplediv447" style="display:block; ">
		if (CodeAnalysisExecutive::depmapforlazyloading.size() &lt;= 1) {
<input onclick="expand_collapse(simplediv448.id, this.id)" type="button" value=" - " id="myButton448" /><div id="simplediv448" style="display:block; ">
			runCodeAnalyzerOnServer(argc, argv);
		}</div>
		unordered_map&lt;std::string, std::set&lt;std::string&gt;&gt;::iterator it = CodeAnalysisExecutive::depmapforlazyloading.begin();
		for (it; it != CodeAnalysisExecutive::depmapforlazyloading.end(); it++) {
<input onclick="expand_collapse(simplediv449.id, this.id)" type="button" value=" - " id="myButton449" /><div id="simplediv449" style="display:block; ">
			string fileStringFromItr = it-&gt;first;
			std::string fileName_ = fileStringFromItr.substr(fileStringFromItr.find_last_of("\\") + 1);
			if (fileName_.compare(FileName) == 0) {
<input onclick="expand_collapse(simplediv450.id, this.id)" type="button" value=" - " id="myButton450" /><div id="simplediv450" style="display:block; ">
				set&lt;string&gt; valueOfMap = it-&gt;second;

				for (std::string str : it-&gt;second)
				{
<input onclick="expand_collapse(simplediv451.id, this.id)" type="button" value=" - " id="myButton451" /><div id="simplediv451" style="display:block; ">
					cout &lt;&lt; "File :" &lt;&lt; FileName &lt;&lt; "depends on " &lt;&lt; str &lt;&lt; endl;
					std::string dependFileNameOnly_ = str.substr(str.find_last_of("\\") + 1);
					cout &lt;&lt; "Trying to send the dependency file " &lt;&lt; dependFileNameOnly_ + ".htm" &lt;&lt; "to the client " &lt;&lt; endl;
					string FileHtmPath = argv[6];
					sendFileToClient(FileHtmPath,dependFileNameOnly_ + ".htm", argc, argv);
				}</div>
			}</div>
		}</div>
		Utilities::StringHelper::Title("Requirement 10 is met: Sent the depedency files to the client for Lazy DownLoad Strategy");
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv452.id, this.id)" type="button" value=" - " id="myButton452" /><div id="simplediv452" style="display:block; ">
		Rslt::write("\n  Exeception caught: ");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
	return true;
}</div>

void createDefaultSendMessageWithAttributes(HttpMessage &msg) {
<input onclick="expand_collapse(simplediv453.id, this.id)" type="button" value=" - " id="myButton453" /><div id="simplediv453" style="display:block; ">

}</div>
void processGetMessageforGetCategories(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv454.id, this.id)" type="button" value=" - " id="myButton454" /><div id="simplediv454" style="display:block; ">

	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	Rslt::write("\nServer needs to process the GetCategories message: \n");
	vector&lt;std::string&gt; getAllCategoriesList = FileSystem::Directory::getDirectories(argv[1]);
	//for (vector&lt;std::string&gt;::iterator it = getAllCategoriesList.begin(); it != getAllCategoriesList.end(); it++)
	for (int i = 0; i &lt;getAllCategoriesList.size(); i++)
	{
<input onclick="expand_collapse(simplediv455.id, this.id)" type="button" value=" - " id="myButton455" /><div id="simplediv455" style="display:block; ">
		//	cout &lt;&lt; "Directory found " &lt;&lt; *it &lt;&lt; " \n";
		if ((getAllCategoriesList[i] != ".") && (getAllCategoriesList[i] != ".."))
		{
<input onclick="expand_collapse(simplediv456.id, this.id)" type="button" value=" - " id="myButton456" /><div id="simplediv456" style="display:block; ">
			sendResult += getAllCategoriesList[i];
			if (i != getAllCategoriesList.size() - 1)
			{
<input onclick="expand_collapse(simplediv457.id, this.id)" type="button" value=" - " id="myButton457" /><div id="simplediv457" style="display:block; ">
				sendResult += ",";
			}</div>
		}</div>
	}</div>
	sndMsg.addAttribute(HttpMessage::Attribute("messageType", "getCategoriesReply"));
	if (sendResult.size() &gt; 0)
	{
<input onclick="expand_collapse(simplediv458.id, this.id)" type="button" value=" - " id="myButton458" /><div id="simplediv458" style="display:block; ">
		sndMsg.addAttribute(HttpMessage::attribute("content-length", Converter&lt;size_t&gt;::toString(sendResult.size())));
		sndMsg.addBody(sendResult); /* We add message body after all atributes are added for client
									to get the body based on content-length attribute */
	}</div>
	getAllCategoriesList.clear();
	Utilities::StringHelper::Title("\n Requirement 8 is met: The HTTP response to be sent from the server end " + sndMsg.toString());
	Rslt::write("\nMessage to be sent is " + sndMsg.toString());
	sendFinalMessageToClient(sndMsg);
}</div>


void processGetMessageForGetFileNamesFromServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv459.id, this.id)" type="button" value=" - " id="myButton459" /><div id="simplediv459" style="display:block; ">
	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	Rslt::write("\nServer needs to process the GetFiles message: \n");
	string searchCategoryPath = argv[1];
	searchCategoryPath += "/" + msg.findValue("FileCategory");
	std::cout &lt;&lt; "\n The argv[1] is: " &lt;&lt; argv[1] &lt;&lt; endl;
	std::cout &lt;&lt; "\n The searchCategoryPath is: " &lt;&lt; searchCategoryPath &lt;&lt; endl;
	vector&lt;std::string&gt; getAllFilesList = FileSystem::Directory::getFiles(searchCategoryPath, "*.*");
	//	for (vector&lt;std::string&gt;::iterator it = getAllFilesList.begin();it != getAllFilesList.end(); it++)
	for (int i = 0; i &lt; getAllFilesList.size(); i++)
	{
<input onclick="expand_collapse(simplediv460.id, this.id)" type="button" value=" - " id="myButton460" /><div id="simplediv460" style="display:block; ">
		cout &lt;&lt; "File found " &lt;&lt; getAllFilesList[i] &lt;&lt; " \n";
		/*if ((*it != ".") && (*it != ".."))
		{
<input onclick="expand_collapse(simplediv461.id, this.id)" type="button" value=" - " id="myButton461" /><div id="simplediv461" style="display:block; ">*/
		sendResult += getAllFilesList[i];
		if (i != getAllFilesList.size() - 1)
		{
<input onclick="expand_collapse(simplediv462.id, this.id)" type="button" value=" - " id="myButton462" /><div id="simplediv462" style="display:block; ">
			sendResult += ",";
		}</div>
		//	}</div>
	}</div>
	sndMsg.addAttribute(HttpMessage::Attribute("messageType", "getFileNamesReply"));
	if (sendResult.size() &gt; 0)
	{
<input onclick="expand_collapse(simplediv463.id, this.id)" type="button" value=" - " id="myButton463" /><div id="simplediv463" style="display:block; ">
		sndMsg.addAttribute(HttpMessage::attribute("content-length", Converter&lt;size_t&gt;::toString(sendResult.size())));
		sndMsg.addBody(sendResult); /* We add message body after all atributes are added for client
									to get the body based on content-length attribute */
	}</div>
	getAllFilesList.clear();
	Rslt::write("\nMessage to be sent is " + sndMsg.toString());
	sendFinalMessageToClient(sndMsg);
}</div>

void processGetMessageFordownloadHtmFileFromServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv464.id, this.id)" type="button" value=" - " id="myButton464" /><div id="simplediv464" style="display:block; ">

	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	size_t contentSize;
	try {
<input onclick="expand_collapse(simplediv465.id, this.id)" type="button" value=" - " id="myButton465" /><div id="simplediv465" style="display:block; ">
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		if (contentSize &gt; 0) {
<input onclick="expand_collapse(simplediv466.id, this.id)" type="button" value=" - " id="myButton466" /><div id="simplediv466" style="display:block; ">
			Socket::byte* buffer = new Socket::byte[contentSize + 1];
			msg.getBody(buffer, contentSize);
			buffer[contentSize] = '\0';
			string getMsgBody = buffer;
			delete[] buffer;
			if (getMsgBody.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv467.id, this.id)" type="button" value=" - " id="myButton467" /><div id="simplediv467" style="display:block; ">
				string FirstDollarSplit = getMsgBody.substr(getMsgBody.find('$') + 1);
				if (FirstDollarSplit.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv468.id, this.id)" type="button" value=" - " id="myButton468" /><div id="simplediv468" style="display:block; ">
					string CategoryName = FirstDollarSplit.substr(0, FirstDollarSplit.find('$'));
					string FileName = FirstDollarSplit.substr(FirstDollarSplit.find('$') + 1);
					Rslt::write("\nServer needs to get File HTML content = " + FileName + " Category = " + CategoryName +
						" message request from the client: \n");
					//javascriptPath_ += "../javascript.js";
					//sendFileToClient(javascriptPath_, sndMsg, argc, argv);
					string FileHtmPath = argv[6];
					sendFileToClient(FileHtmPath, FileName + ".htm", argc, argv);
					SendDependencyFilesToClient(FileName, argc, argv);
				}</div>
			}</div>
		}</div>
	}</div>


	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv469.id, this.id)" type="button" value=" - " id="myButton469" /><div id="simplediv469" style="display:block; ">
		Rslt::write("\n  Exeception caught in the method deleteSingleFileOnServer: \n");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
}</div>


bool processGetMessages(HttpMessage &msg, int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv470.id, this.id)" type="button" value=" - " id="myButton470" /><div id="simplediv470" style="display:block; ">
	string sendResult = "";
	HttpMessage sndMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	sndMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	sndMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	sndMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	sndMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	if (msg.findValue("messageType") != "")
	{
<input onclick="expand_collapse(simplediv471.id, this.id)" type="button" value=" - " id="myButton471" /><div id="simplediv471" style="display:block; ">
		if (msg.findValue("messageType").compare("getCategories") == 0)
		{
<input onclick="expand_collapse(simplediv472.id, this.id)" type="button" value=" - " id="myButton472" /><div id="simplediv472" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the File Categories to the client");
			processGetMessageforGetCategories(msg, argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("getFileNamesFromServer") == 0)
		{
<input onclick="expand_collapse(simplediv473.id, this.id)" type="button" value=" - " id="myButton473" /><div id="simplediv473" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the File Names with in category to the client");
			processGetMessageForGetFileNamesFromServer(msg,argc,argv);
		}</div>
		else if (msg.findValue("messageType").compare("downloadHtmFileFromServer") == 0) {
<input onclick="expand_collapse(simplediv474.id, this.id)" type="button" value=" - " id="myButton474" /><div id="simplediv474" style="display:block; ">
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the Html and dependent files to the client");
			processGetMessageFordownloadHtmFileFromServer(msg, argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("downloadJsAndCssFromServer") == 0) {
<input onclick="expand_collapse(simplediv475.id, this.id)" type="button" value=" - " id="myButton475" /><div id="simplediv475" style="display:block; ">
			cout &lt;&lt; "\n Repository::processGetMessages::Request for download js and css files came from Client" &lt;&lt; endl;
			string FileHtmPath="../";
			string JsFileName="javascript.js";
			string CSSFileName = "stylesheet.css";
			Utilities::StringHelper::Title("Demonstrating Requirement5: Sending the JSS and CSS files to Client");
			sendFileToClient(FileHtmPath, JsFileName, argc, argv);
			sendFileToClient(FileHtmPath, CSSFileName, argc, argv);
			Utilities::StringHelper::Title("Requirement 5 is met: Sent the js and css files to the client");
		}</div>
	}</div>
	return true;
}</div>



void deleteSingleFileOnServer(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv476.id, this.id)" type="button" value=" - " id="myButton476" /><div id="simplediv476" style="display:block; ">
	Rslt::write("\nServer needs to process the delete message request from the client: \n");
	size_t contentSize = 0;
	HttpMessage replyMsg;
	std::string SrvrEndPoint = "localhost::8080";
	std::string ClientEndPoint = "localhost::8081";
	replyMsg.addAttribute(HttpMessage::attribute("GET", "Message"));
	replyMsg.addAttribute(HttpMessage::Attribute("mode", "oneWay"));
	replyMsg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ClientEndPoint));
	replyMsg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + SrvrEndPoint));
	try {
<input onclick="expand_collapse(simplediv477.id, this.id)" type="button" value=" - " id="myButton477" /><div id="simplediv477" style="display:block; ">
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		if (contentSize &gt; 0) {
<input onclick="expand_collapse(simplediv478.id, this.id)" type="button" value=" - " id="myButton478" /><div id="simplediv478" style="display:block; ">
			Socket::byte* buffer = new Socket::byte[contentSize + 1];
			msg.getBody(buffer, contentSize);
			buffer[contentSize] = '\0';
			string getMsgBody = buffer;
			delete[] buffer;
			if (getMsgBody.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv479.id, this.id)" type="button" value=" - " id="myButton479" /><div id="simplediv479" style="display:block; ">
				string FirstDollarSplit = getMsgBody.substr(getMsgBody.find('$') + 1);
				if (FirstDollarSplit.find('$') != std::string::npos) {
<input onclick="expand_collapse(simplediv480.id, this.id)" type="button" value=" - " id="myButton480" /><div id="simplediv480" style="display:block; ">
					string CategoryName = FirstDollarSplit.substr(0, FirstDollarSplit.find('$'));
					string FileName = FirstDollarSplit.substr(FirstDollarSplit.find('$') + 1);
					Rslt::write("\nServer needs to delete File = " + FileName + " Category = " + CategoryName +
						" message request from the client: \n");
					string FileDeletePath = argv[1];
					FileDeletePath += '/' + CategoryName + '/' + FileName;
					Rslt::write("\n FilePath to be deleted is :" + FileDeletePath);
					if (FileSystem::File::exists(FileDeletePath)) {
<input onclick="expand_collapse(simplediv481.id, this.id)" type="button" value=" - " id="myButton481" /><div id="simplediv481" style="display:block; ">
						FileSystem::File::remove(FileDeletePath);
					}</div>
				}</div>
			}</div>
		}</div>
	}</div>
	catch (std::exception& exc)
	{
<input onclick="expand_collapse(simplediv482.id, this.id)" type="button" value=" - " id="myButton482" /><div id="simplediv482" style="display:block; ">
		Rslt::write("\n  Exeception caught in the method deleteSingleFileOnServer: \n");
		std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
		Rslt::write(exMsg);
	}</div>
}</div>

bool processPostMessages(HttpMessage &msg, int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv483.id, this.id)" type="button" value=" - " id="myButton483" /><div id="simplediv483" style="display:block; ">
	cout&lt;&lt;"\nServer needs to process the Post message request from the client: \n"&lt;&lt;endl;
	if (msg.findValue("messageType") != "")
	{
<input onclick="expand_collapse(simplediv484.id, this.id)" type="button" value=" - " id="myButton484" /><div id="simplediv484" style="display:block; ">
		if (msg.findValue("messageType").compare("runCodeAnalyzer") == 0) {
<input onclick="expand_collapse(simplediv485.id, this.id)" type="button" value=" - " id="myButton485" /><div id="simplediv485" style="display:block; ">
			cout &lt;&lt; "\nServer needs to process the runCodeAnalyzer message request from the client: \n";
			runCodeAnalyzerOnServer(argc, argv);
		}</div>
		else if (msg.findValue("messageType").compare("deleteFileFromServer") == 0) {
<input onclick="expand_collapse(simplediv486.id, this.id)" type="button" value=" - " id="myButton486" /><div id="simplediv486" style="display:block; ">
			deleteSingleFileOnServer(msg, argc, argv);
		}</div>
	}</div>
	return true;
}</div>


HttpMessage ClientHandler::readMessageForPost(HttpMessage& msg, Socket& socket) {
<input onclick="expand_collapse(simplediv487.id, this.id)" type="button" value=" - " id="myButton487" /><div id="simplediv487" style="display:block; ">

	std::string filename = msg.findValue("file");
	if (filename != "")
	{
<input onclick="expand_collapse(simplediv488.id, this.id)" type="button" value=" - " id="myButton488" /><div id="simplediv488" style="display:block; ">
		size_t contentSize;
		std::string sizeString = msg.findValue("content-length");
		if (sizeString != "")
			contentSize = Converter&lt;size_t&gt;::toValue(sizeString);
		else
			return msg;

		std::string getDir = msg.findValue("directory");

		readFile(filename, contentSize, getDir, socket);
	}</div>

	if (filename != "")
	{
<input onclick="expand_collapse(simplediv489.id, this.id)" type="button" value=" - " id="myButton489" /><div id="simplediv489" style="display:block; ">
		msg.removeAttribute("content-length");
		std::string bodyString = "&lt;file&gt;" + filename + "&lt;/file&gt;";
		std::string sizeString = Converter&lt;size_t&gt;::toString(bodyString.size());
		msg.addAttribute(HttpMessage::Attribute("content-length", sizeString));
		msg.addBody(bodyString);
	}</div>
	else
	{
<input onclick="expand_collapse(simplediv490.id, this.id)" type="button" value=" - " id="myButton490" /><div id="simplediv490" style="display:block; ">
		size_t numBytes = 0;
		size_t pos = msg.findAttribute("content-length");
		if (pos &lt; msg.attributes().size())
		{
<input onclick="expand_collapse(simplediv491.id, this.id)" type="button" value=" - " id="myButton491" /><div id="simplediv491" style="display:block; ">
			numBytes = Converter&lt;size_t&gt;::toValue(msg.attributes()[pos].second);
			Socket::byte* buffer = new Socket::byte[numBytes + 1];
			socket.recv(numBytes, buffer);
			buffer[numBytes] = '\0';
			std::string msgBody(buffer);
			msg.addBody(msgBody);
			delete[] buffer;
		}</div>
	}</div>

	return msg;
}</div>

//----&lt; this defines processing to frame messages &gt;------------------

HttpMessage ClientHandler::readMessage(Socket& socket)
{
<input onclick="expand_collapse(simplediv492.id, this.id)" type="button" value=" - " id="myButton492" /><div id="simplediv492" style="display:block; ">  connectionClosed_ = false;
	HttpMessage msg;
	while (true)
	{
<input onclick="expand_collapse(simplediv493.id, this.id)" type="button" value=" - " id="myButton493" /><div id="simplediv493" style="display:block; ">
		std::string attribString = socket.recvString('\n');
		if (attribString.size() &gt; 1)
		{
<input onclick="expand_collapse(simplediv494.id, this.id)" type="button" value=" - " id="myButton494" /><div id="simplediv494" style="display:block; ">
			HttpMessage::Attribute attrib = HttpMessage::parseAttribute(attribString);
			msg.addAttribute(attrib);
		}</div>
		else
			break;
	}</div>
	if (msg.attributes().size() == 0)
	{
<input onclick="expand_collapse(simplediv495.id, this.id)" type="button" value=" - " id="myButton495" /><div id="simplediv495" style="display:block; ">
		connectionClosed_ = true;
		return msg;
	}</div>
	if (msg.attributes()[0].first == "POST")
		msg = readMessageForPost(msg, socket);
	else if (msg.attributes()[0].first == "GET") {
<input onclick="expand_collapse(simplediv496.id, this.id)" type="button" value=" - " id="myButton496" /><div id="simplediv496" style="display:block; ">
		std::string getMessageType = msg.findValue("messageType");
			size_t numBytes = 0;
			size_t pos = msg.findAttribute("content-length");
			if (pos &lt; msg.attributes().size())
			{
<input onclick="expand_collapse(simplediv497.id, this.id)" type="button" value=" - " id="myButton497" /><div id="simplediv497" style="display:block; ">
				numBytes = Converter&lt;size_t&gt;::toValue(msg.attributes()[pos].second);
				Socket::byte* buffer = new Socket::byte[numBytes + 1];
				socket.recv(numBytes, buffer);
				buffer[numBytes] = '\0';
				std::string msgBody(buffer);
				msg.addBody(msgBody);
				delete[] buffer;
			}</div>
	}</div>
	return msg;
}</div>
//----&lt; read a binary file from socket and save &gt;--------------------
/*
* This function expects the sender to have already send a file message,
* and when this function is running, continuosly send bytes until
* fileSize bytes have been sent.
*/
bool ClientHandler::readFile(const std::string& filename, size_t fileSize, 
	                         const std::string& getDir, Socket& socket)
{
<input onclick="expand_collapse(simplediv498.id, this.id)" type="button" value=" - " id="myButton498" /><div id="simplediv498" style="display:block; ">
	//std::string fqname = "../TestFiles_Client_Server/" + filename + ".snt";
  	std::string checkDirPath = path_+"/"+getDir; 
	if (FileSystem::Directory::exists(checkDirPath) == false)
	{
<input onclick="expand_collapse(simplediv499.id, this.id)" type="button" value=" - " id="myButton499" /><div id="simplediv499" style="display:block; ">
		FileSystem::Directory::create(checkDirPath);
	}</div>
	std::string fqname = path_ + "/" + getDir + "/" + filename;
	Rslt::write(" Trying to readFile: " + fqname + " \n");
	FileSystem::File file(fqname);
	file.open(FileSystem::File::out, FileSystem::File::binary);
	if (!file.isGood())
	{
<input onclick="expand_collapse(simplediv500.id, this.id)" type="button" value=" - " id="myButton500" /><div id="simplediv500" style="display:block; ">
		Rslt::write("\n\n  can't open file " + fqname);
		return false;
	}</div>

	const size_t BlockSize = 2048;
	Socket::byte buffer[BlockSize];
	size_t bytesToRead;
	while (true)
	{
<input onclick="expand_collapse(simplediv501.id, this.id)" type="button" value=" - " id="myButton501" /><div id="simplediv501" style="display:block; ">
		if (fileSize &gt; BlockSize)
			bytesToRead = BlockSize;
		else
			bytesToRead = fileSize;

		socket.recv(bytesToRead, buffer);

		FileSystem::Block blk;
		for (size_t i = 0; i &lt; bytesToRead; ++i)
			blk.push_back(buffer[i]);

		file.putBlock(blk);
		if (fileSize &lt; BlockSize)
			break;
		fileSize -= BlockSize;
	}</div>
	file.close();
	return true;
}</div>
//----&lt; receiver functionality is defined by this function &gt;---------

void ClientHandler::operator()(Socket socket)
{
<input onclick="expand_collapse(simplediv502.id, this.id)" type="button" value=" - " id="myButton502" /><div id="simplediv502" style="display:block; ">
	
	while (true)
	{
<input onclick="expand_collapse(simplediv503.id, this.id)" type="button" value=" - " id="myButton503" /><div id="simplediv503" style="display:block; ">
		HttpMessage msg = readMessage(socket);
	
		if (connectionClosed_ || msg.bodyString() == "quit")
		{
<input onclick="expand_collapse(simplediv504.id, this.id)" type="button" value=" - " id="myButton504" /><div id="simplediv504" style="display:block; ">
			Rslt::write("\n\n  clienthandler thread is terminating \n");
			break;
		}</div>
		//if (msg.toString().size() &gt; 5) {
<input onclick="expand_collapse(simplediv505.id, this.id)" type="button" value=" - " id="myButton505" /><div id="simplediv505" style="display:block; ">
		msgQ_.enQ(msg);
		//}</div>
	}</div>
}</div>

bool ClientHandler::ProcessCommandLine(int argc, char * argv[])
{
<input onclick="expand_collapse(simplediv506.id, this.id)" type="button" value=" - " id="myButton506" /><div id="simplediv506" style="display:block; ">
	
	try {
<input onclick="expand_collapse(simplediv507.id, this.id)" type="button" value=" - " id="myButton507" /><div id="simplediv507" style="display:block; ">
		path_ = FileSystem::Path::getFullFileSpec(argv[1]);
		if (!FileSystem::Directory::exists(path_))
		{
<input onclick="expand_collapse(simplediv508.id, this.id)" type="button" value=" - " id="myButton508" /><div id="simplediv508" style="display:block; ">
			std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
			return false;
		}</div>

	}</div>
	catch (std::exception& ex)
	{
<input onclick="expand_collapse(simplediv509.id, this.id)" type="button" value=" - " id="myButton509" /><div id="simplediv509" style="display:block; ">
		Utils::Title("\ncommand line argument parsing error:");
		std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
		return false;
	}</div>
	Rslt::write("\nInside ProcessCommandLine of ClientHandler");
	return true;
}</div>

//----&lt; initialize application specific FileMgr &gt;--------------------
/*
 * - Accepts CodeAnalysisExecutive's path and fileMap by reference
 */
AnalFileMgr::AnalFileMgr(const Path& path, FileMap& fileMap)
  : FileMgr(path), fileMap_(fileMap), numFiles_(0), numDirs_(0) {
<input onclick="expand_collapse(simplediv510.id, this.id)" type="button" value=" - " id="myButton510" /><div id="simplediv510" style="display:block; ">}</div>

//----&lt; override of FileMgr::file(...) to store found files &gt;------

void AnalFileMgr::file(const File& f)
{
<input onclick="expand_collapse(simplediv511.id, this.id)" type="button" value=" - " id="myButton511" /><div id="simplediv511" style="display:block; ">
  File fqf = d_ + "\\" + f;
  Ext ext = FileSystem::Path::getExt(fqf);
  Pattern p = "*." + ext;
  fileMap_[p].push_back(fqf);
  ++numFiles_;
}</div>
//----&lt; override of FileMgr::dir(...) to save current dir &gt;----------

void AnalFileMgr::dir(const Dir& d)
{
<input onclick="expand_collapse(simplediv512.id, this.id)" type="button" value=" - " id="myButton512" /><div id="simplediv512" style="display:block; ">
  d_ = d;
  ++numDirs_;
}</div>
//----&lt; override of FileMgr::done(), not currently used &gt;------------

void AnalFileMgr::done()
{
<input onclick="expand_collapse(simplediv513.id, this.id)" type="button" value=" - " id="myButton513" /><div id="simplediv513" style="display:block; ">
}</div>
//----&lt; returns number of matched files from search &gt;----------------

size_t AnalFileMgr::numFiles()
{
<input onclick="expand_collapse(simplediv514.id, this.id)" type="button" value=" - " id="myButton514" /><div id="simplediv514" style="display:block; ">
  return numFiles_;
}</div>

//----&lt; returns number of dirs searched &gt;----------------------------

size_t AnalFileMgr::numDirs()
{
<input onclick="expand_collapse(simplediv515.id, this.id)" type="button" value=" - " id="myButton515" /><div id="simplediv515" style="display:block; ">
  return numDirs_;
}</div>

/////////////////////////////////////////////////////////////////////
// CodeAnalysisExecutive class
// - 
using Path = std::string;
using Pattern = std::string;
using Patterns = std::vector&lt;Pattern&gt;;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
using ASTNodes = std::vector&lt;ASTNode*&gt;;
using FileToNodeCollection = std::vector&lt;std::pair&lt;File, ASTNode*&gt;&gt;;

std::unordered_map&lt;std::string, std::set&lt;std::string&gt;&gt; CodeAnalysisExecutive::depmapforlazyloading = {
<input onclick="expand_collapse(simplediv516.id, this.id)" type="button" value=" - " id="myButton516" /><div id="simplediv516" style="display:block; "> {
<input onclick="expand_collapse(simplediv517.id, this.id)" type="button" value=" - " id="myButton517" /><div id="simplediv517" style="display:block; ">}</div> }</div>;
//----&lt; initialize parser, get access to repository &gt;----------------

CodeAnalysisExecutive::CodeAnalysisExecutive()
{
<input onclick="expand_collapse(simplediv518.id, this.id)" type="button" value=" - " id="myButton518" /><div id="simplediv518" style="display:block; ">
  pParser_ = configure_.Build();
  if (pParser_ == nullptr)
  {
<input onclick="expand_collapse(simplediv519.id, this.id)" type="button" value=" - " id="myButton519" /><div id="simplediv519" style="display:block; ">
    throw std::exception("couldn't create parser");
  }</div>
  pRepo_ = Repository::getInstance();
}</div>

//----&lt; cleanup &gt;----------------------------------------------------

CodeAnalysisExecutive::~CodeAnalysisExecutive()
{
<input onclick="expand_collapse(simplediv520.id, this.id)" type="button" value=" - " id="myButton520" /><div id="simplediv520" style="display:block; ">
  /*
   *  Nothing to do:
   *  - pParser_ and pRepo_ point to objects that the configure_
   *    destructor will delete.
   *  - The AbstractSynTree object will cleanup its contents when
   *    it goes out of scope by deleting the root of the AST node
   *    tree.  
   *  - Each node deletes its children, so, again, nothing more 
   *    to do.
   *  - This is here to present these comments and to make this
   *    base destructor virtual.
   */
}</div>
//----&lt; usage message &gt;----------------------------------------------

void showUsage()
{
<input onclick="expand_collapse(simplediv521.id, this.id)" type="button" value=" - " id="myButton521" /><div id="simplediv521" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; "\n  Usage:";
  out &lt;&lt; "\n  Command Line Arguments are:";
  out &lt;&lt; "\n  - 1st: path to subdirectory containing files to analyze";
  out &lt;&lt; "\n  - remaining non-option arguments are file patterns, e.g., *.h and/or *.cpp, etc.";
  out &lt;&lt; "\n  - must have at least one file pattern to specify what to process";
  out &lt;&lt; "\n  - option arguments have the format \"\"/x\" , where x is one of the options:";
  out &lt;&lt; "\n    - m : display function metrics";
  out &lt;&lt; "\n    - s : display file sizes";
  out &lt;&lt; "\n    - a : display Abstract Syntax Tree";
  out &lt;&lt; "\n    - r : set logger to display results";
  out &lt;&lt; "\n    - d : set logger to display demo outputs";
  out &lt;&lt; "\n    - b : set logger to display debug outputs";
  out &lt;&lt; "\n    - f : write all logs to logfile.txt";
  out &lt;&lt; "\n  A metrics summary is always shown, independent of any options used or not used";
  out &lt;&lt; "\n\n";
  std::cout &lt;&lt; out.str();
  //Rslt::write(out.str());
  //Rslt::flush();
}</div>
//----&lt; show command line arguments &gt;--------------------------------

void CodeAnalysisExecutive::showCommandLineArguments(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv522.id, this.id)" type="button" value=" - " id="myButton522" /><div id="simplediv522" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; "\n     Path: \"" &lt;&lt; FileSystem::Path::getFullFileSpec(argv[1]) &lt;&lt; "\"\n     Args: ";
  for (int i = 2; i &lt; argc - 1; ++i)
    out &lt;&lt; argv[i] &lt;&lt; ", ";
  out &lt;&lt; argv[argc - 1];
  Rslt::write(out.str());
  Rslt::flush();
}</div>
//----&lt; handle command line arguments &gt;------------------------------
/*
* Arguments are:
* - path: possibly relative path to folder containing all analyzed code,
*   e.g., may be anywhere in the directory tree rooted at that path
* - patterns: one or more file patterns of the form *.h, *.cpp, and *.cs
* - options: /m (show metrics), /s (show file sizes), and /a (show AST)
*/
bool CodeAnalysisExecutive::ProcessCommandLine(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv523.id, this.id)" type="button" value=" - " id="myButton523" /><div id="simplediv523" style="display:block; ">
  if (argc &lt; 2)
  {
<input onclick="expand_collapse(simplediv524.id, this.id)" type="button" value=" - " id="myButton524" /><div id="simplediv524" style="display:block; ">
    showUsage();
    return false;
  }</div>
  try {
<input onclick="expand_collapse(simplediv525.id, this.id)" type="button" value=" - " id="myButton525" /><div id="simplediv525" style="display:block; ">
    path_ = FileSystem::Path::getFullFileSpec(argv[1]);
    if (!FileSystem::Directory::exists(path_))
    {
<input onclick="expand_collapse(simplediv526.id, this.id)" type="button" value=" - " id="myButton526" /><div id="simplediv526" style="display:block; ">
      std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
      return false;
    }</div>
    for (int i = 2; i &lt; argc; ++i)
    {
<input onclick="expand_collapse(simplediv527.id, this.id)" type="button" value=" - " id="myButton527" /><div id="simplediv527" style="display:block; ">
      if (argv[i][0] == '/')
        options_.push_back(argv[i][1]);
      else
        patterns_.push_back(argv[i]);
    }</div>
    if (patterns_.size() == 0)
    {
<input onclick="expand_collapse(simplediv528.id, this.id)" type="button" value=" - " id="myButton528" /><div id="simplediv528" style="display:block; ">
      showUsage();
      return false;
    }</div>
  }</div>
  catch (std::exception& ex)
  {
<input onclick="expand_collapse(simplediv529.id, this.id)" type="button" value=" - " id="myButton529" /><div id="simplediv529" style="display:block; ">
	Utils::Title("\ncommand line argument parsing error:");
    std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    return false;
  }</div>
  return true;
}</div>
//----&lt; returns path entered on command line &gt;-------------------

std::string CodeAnalysisExecutive::getAnalysisPath()
{
<input onclick="expand_collapse(simplediv530.id, this.id)" type="button" value=" - " id="myButton530" /><div id="simplediv530" style="display:block; ">
  return path_;
}</div>
//----&lt; returns reference to FileMap &gt;---------------------------
/*
 * Supports quickly finding all the files found with a give pattern
 */
FileMap& CodeAnalysisExecutive::getFileMap()
{
<input onclick="expand_collapse(simplediv531.id, this.id)" type="button" value=" - " id="myButton531" /><div id="simplediv531" style="display:block; ">
  return fileMap_;
}</div>
//----&lt; searches path for files matching specified patterns &gt;----
/*
 * - Searches entire diretory tree rooted at path_, evaluated 
 *   from a command line argument.
 * - Saves found files in FileMap.
 */
void CodeAnalysisExecutive::getSourceFiles()
{
<input onclick="expand_collapse(simplediv532.id, this.id)" type="button" value=" - " id="myButton532" /><div id="simplediv532" style="display:block; ">
  AnalFileMgr fm(path_, fileMap_);
  for (auto patt : patterns_)
    fm.addPattern(patt);
  fm.search();
  numFiles_ = fm.numFiles();
  numDirs_ = fm.numDirs();
}</div>

std::string CodeAnalysisExecutive::systemTime()
{
<input onclick="expand_collapse(simplediv533.id, this.id)" type="button" value=" - " id="myButton533" /><div id="simplediv533" style="display:block; ">
	time_t sysTime = time(&sysTime);
	char buffer[27];
	ctime_s(buffer, 27, &sysTime);
	buffer[24] = '\0';
	std::string temp(buffer);
	return temp;
}</div>

//----&lt; helper: is text a substring of str? &gt;--------------------

bool contains(const std::string& str, const std::string& text)
{
<input onclick="expand_collapse(simplediv534.id, this.id)" type="button" value=" - " id="myButton534" /><div id="simplediv534" style="display:block; ">
  if (str.find(text) &lt; str.length())
    return true;
  return false;
}</div>
//----&lt; retrieve from fileMap all files matching *.h &gt;-----------

std::vector&lt;File&gt;& CodeAnalysisExecutive::cppHeaderFiles()
{
<input onclick="expand_collapse(simplediv535.id, this.id)" type="button" value=" - " id="myButton535" /><div id="simplediv535" style="display:block; ">
  cppHeaderFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv536.id, this.id)" type="button" value=" - " id="myButton536" /><div id="simplediv536" style="display:block; ">
    if (contains(item.first, "*.h"))
    {
<input onclick="expand_collapse(simplediv537.id, this.id)" type="button" value=" - " id="myButton537" /><div id="simplediv537" style="display:block; ">
      for (auto file : item.second)
        cppHeaderFiles_.push_back(file);
    }</div>
  }</div>
  return cppHeaderFiles_;
}</div>

//----&lt; retrieve from fileMap all files matching *.cpp &gt;---------

std::vector&lt;File&gt;& CodeAnalysisExecutive::cppImplemFiles()
{
<input onclick="expand_collapse(simplediv538.id, this.id)" type="button" value=" - " id="myButton538" /><div id="simplediv538" style="display:block; ">
  cppImplemFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv539.id, this.id)" type="button" value=" - " id="myButton539" /><div id="simplediv539" style="display:block; ">
    if (contains(item.first, "*.cpp"))
    {
<input onclick="expand_collapse(simplediv540.id, this.id)" type="button" value=" - " id="myButton540" /><div id="simplediv540" style="display:block; ">
      for (auto file : item.second)
        cppImplemFiles_.push_back(file);
    }</div>
  }</div>
  return cppImplemFiles_;
}</div>
//----&lt; retrieve from fileMap all files matching *.cs &gt;----------

std::vector&lt;File&gt;& CodeAnalysisExecutive::csharpFiles()
{
<input onclick="expand_collapse(simplediv541.id, this.id)" type="button" value=" - " id="myButton541" /><div id="simplediv541" style="display:block; ">
  csharpFiles_.clear();
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv542.id, this.id)" type="button" value=" - " id="myButton542" /><div id="simplediv542" style="display:block; ">
    if (contains(item.first, "*.cs"))
    {
<input onclick="expand_collapse(simplediv543.id, this.id)" type="button" value=" - " id="myButton543" /><div id="simplediv543" style="display:block; ">
      for (auto file : item.second)
        csharpFiles_.push_back(file);
    }</div>
  }</div>
  return csharpFiles_;
}</div>
//----&lt; report number of Source Lines Of Code (SLOCs) &gt;----------

CodeAnalysisExecutive::Slocs CodeAnalysisExecutive::fileSLOCs(const File& file) 
{
<input onclick="expand_collapse(simplediv544.id, this.id)" type="button" value=" - " id="myButton544" /><div id="simplediv544" style="display:block; "> 
  return slocMap_[file];
}</div>
//----&lt; report number of files processed &gt;-----------------------

size_t CodeAnalysisExecutive::numFiles()
{
<input onclick="expand_collapse(simplediv545.id, this.id)" type="button" value=" - " id="myButton545" /><div id="simplediv545" style="display:block; ">
  return numFiles_;
}</div>
//----&lt; report number of directories searched &gt;------------------

size_t CodeAnalysisExecutive::numDirs()
{
<input onclick="expand_collapse(simplediv546.id, this.id)" type="button" value=" - " id="myButton546" /><div id="simplediv546" style="display:block; ">
  return numDirs_;
}</div>
//----&lt; show processing activity &gt;-------------------------------

void CodeAnalysisExecutive::showActivity(const File& file)
{
<input onclick="expand_collapse(simplediv547.id, this.id)" type="button" value=" - " id="myButton547" /><div id="simplediv547" style="display:block; ">
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count)
  {
<input onclick="expand_collapse(simplediv548.id, this.id)" type="button" value=" - " id="myButton548" /><div id="simplediv548" style="display:block; ">
    return in.substr(0, count);
  }</div>;

  if (Rslt::running())
  {
<input onclick="expand_collapse(simplediv549.id, this.id)" type="button" value=" - " id="myButton549" /><div id="simplediv549" style="display:block; ">
    std::cout &lt;&lt; std::left &lt;&lt; "\r     Processing file: " &lt;&lt; std::setw(80) &lt;&lt; trunc(file, 80);
  }</div>
}</div>

void CodeAnalysisExecutive::clearActivity()
{
<input onclick="expand_collapse(simplediv550.id, this.id)" type="button" value=" - " id="myButton550" /><div id="simplediv550" style="display:block; ">
  if (Rslt::running())
  {
<input onclick="expand_collapse(simplediv551.id, this.id)" type="button" value=" - " id="myButton551" /><div id="simplediv551" style="display:block; ">
    std::cout &lt;&lt; std::left &lt;&lt; "\r                      " &lt;&lt; std::setw(80) &lt;&lt; std::string(80,' ');
  }</div>
}</div>
//----&lt; parses code and saves results in AbstrSynTree &gt;--------------
/*
* - Processes C++ header files first to build AST with nodes for
*   all public classes and structs.
* - Then processes C++ implementation files.  Each member function
*   is relocated to its class scope node, not the local scope.
* - Therefore, this ordering is important.
* - C# code has all member functions inline, so we don't need to
*   do any relocation of nodes in the AST.  Therefore, that analysis
*   can be done at any time.
* - If you bore down into the analysis code in ActionsAndRules.h you
*   will find some gymnastics to handle template syntax.  That can
*   get somewhat complicated, so there may be some latent bugs there.
*   I don't know of any at this time.
*/
void CodeAnalysisExecutive::setLanguage(const File& file)
{
<input onclick="expand_collapse(simplediv552.id, this.id)" type="button" value=" - " id="myButton552" /><div id="simplediv552" style="display:block; ">
  std::string ext = FileSystem::Path::getExt(file);
  if (ext == "h" || ext == "cpp")
    pRepo_-&gt;language() = Language::Cpp;
  else if (ext == "cs")
    pRepo_-&gt;language() = Language::CSharp;
}</div>

void CodeAnalysisExecutive::processSourceCode(bool showProc)
{
<input onclick="expand_collapse(simplediv553.id, this.id)" type="button" value=" - " id="myButton553" /><div id="simplediv553" style="display:block; ">
  for (auto file : cppHeaderFiles())
  {
<input onclick="expand_collapse(simplediv554.id, this.id)" type="button" value=" - " id="myButton554" /><div id="simplediv554" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv555.id, this.id)" type="button" value=" - " id="myButton555" /><div id="simplediv555" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      Rslt::flush();
      continue;
    }</div>
    // parse file
    Rslt::flush();
    Demo::flush();
    Dbug::flush();

    if(!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if(!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::Cpp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
    {
<input onclick="expand_collapse(simplediv556.id, this.id)" type="button" value=" - " id="myButton556" /><div id="simplediv556" style="display:block; ">
      pParser_-&gt;parse();
    }</div>

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  for (auto file : cppImplemFiles())
  {
<input onclick="expand_collapse(simplediv557.id, this.id)" type="button" value=" - " id="myButton557" /><div id="simplediv557" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv558.id, this.id)" type="button" value=" - " id="myButton558" /><div id="simplediv558" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      Rslt::flush();
      continue;
    }</div>
    // parse file

    if (!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if (!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::Cpp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
      pParser_-&gt;parse();

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  for (auto file : csharpFiles())
  {
<input onclick="expand_collapse(simplediv559.id, this.id)" type="button" value=" - " id="myButton559" /><div id="simplediv559" style="display:block; ">
    if (showProc)
      showActivity(file);
    pRepo_-&gt;package() = FileSystem::Path::getName(file);

    if (!configure_.Attach(file))
    {
<input onclick="expand_collapse(simplediv560.id, this.id)" type="button" value=" - " id="myButton560" /><div id="simplediv560" style="display:block; ">
      std::ostringstream out;
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n";
      Rslt::write(out.str());
      continue;
    }</div>
    // parse file

    if (!Rslt::running())
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    if (!Demo::running() && !Rslt::running())
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\"");
    pRepo_-&gt;language() = Language::CSharp;
    pRepo_-&gt;currentPath() = file;
    while (pParser_-&gt;next())
      pParser_-&gt;parse();

    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount();
    slocMap_[pRepo_-&gt;package()] = slocs;
  }</div>
  if (showProc)
    clearActivity();
  std::ostringstream out;
  out &lt;&lt; std::left &lt;&lt; "\r  " &lt;&lt; std::setw(77) &lt;&lt; " ";
  Rslt::write(out.str());
}</div>
//----&lt; evaluate complexities of each AST node &gt;---------------------

void CodeAnalysisExecutive::complexityAnalysis()
{
<input onclick="expand_collapse(simplediv561.id, this.id)" type="button" value=" - " id="myButton561" /><div id="simplediv561" style="display:block; ">
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  CodeAnalysis::complexityEval(pGlobalScope);
}</div>
//----&lt; comparison functor for sorting FileToNodeCollection &gt;----
/*
* - supports stable sort on extension values
* - displayMetrics(...) uses to organize metrics display
*/
struct CompExts
{
<input onclick="expand_collapse(simplediv562.id, this.id)" type="button" value=" - " id="myButton562" /><div id="simplediv562" style="display:block; ">
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second)
  {
<input onclick="expand_collapse(simplediv563.id, this.id)" type="button" value=" - " id="myButton563" /><div id="simplediv563" style="display:block; ">
    return FileSystem::Path::getExt(first.first) &gt; FileSystem::Path::getExt(second.first);
  }</div>
}</div>;
//----&lt; comparison functor for sorting FileToNodeCollection &gt;----
/*
* - supports stable sort on name values
* - displayMetrics(...) uses these functions to organize metrics display
*/
static void removeExt(std::string& name)
{
<input onclick="expand_collapse(simplediv564.id, this.id)" type="button" value=" - " id="myButton564" /><div id="simplediv564" style="display:block; ">
  size_t extStartIndex = name.find_last_of('.');
  name = name.substr(0, extStartIndex);
}</div>

struct CompNames
{
<input onclick="expand_collapse(simplediv565.id, this.id)" type="button" value=" - " id="myButton565" /><div id="simplediv565" style="display:block; ">
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second)
  {
<input onclick="expand_collapse(simplediv566.id, this.id)" type="button" value=" - " id="myButton566" /><div id="simplediv566" style="display:block; ">
    std::string fnm = FileSystem::Path::getName(first.first);
    removeExt(fnm);
    std::string snm = FileSystem::Path::getName(second.first);
    removeExt(snm);
    return fnm &lt; snm;
  }</div>
}</div>;
//----&lt; display header line for displayMmetrics() &gt;------------------

void CodeAnalysisExecutive::displayHeader()
{
<input onclick="expand_collapse(simplediv567.id, this.id)" type="button" value=" - " id="myButton567" /><div id="simplediv567" style="display:block; ">
  std::ostringstream out;
  out &lt;&lt; std::right;
  out &lt;&lt; "\n ";
  out &lt;&lt; std::setw(25) &lt;&lt; "file name";
  out &lt;&lt; std::setw(12) &lt;&lt; "type";
  out &lt;&lt; std::setw(35) &lt;&lt; "name";
  out &lt;&lt; std::setw(8) &lt;&lt; "line";
  out &lt;&lt; std::setw(8) &lt;&lt; "size";
  out &lt;&lt; std::setw(8) &lt;&lt; "cplx";
  out &lt;&lt; std::right;
  out &lt;&lt; "\n  ";
  out &lt;&lt; std::setw(25) &lt;&lt; "-----------------------";
  out &lt;&lt; std::setw(12) &lt;&lt; "----------";
  out &lt;&lt; std::setw(35) &lt;&lt; "---------------------------------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  out &lt;&lt; std::setw(8) &lt;&lt; "------";
  Rslt::write(out.str());
}</div>
//----&lt; display single line for displayMetrics() &gt;-------------------

void CodeAnalysisExecutive::displayMetricsLine(const File& file, ASTNode* pNode)
{
<input onclick="expand_collapse(simplediv568.id, this.id)" type="button" value=" - " id="myButton568" /><div id="simplediv568" style="display:block; ">
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count)
  {
<input onclick="expand_collapse(simplediv569.id, this.id)" type="button" value=" - " id="myButton569" /><div id="simplediv569" style="display:block; ">
    return in.substr(0, count);
  }</div>;
  std::ostringstream out;
  out &lt;&lt; std::right;
  out &lt;&lt; "\n ";
  out &lt;&lt; std::setw(25) &lt;&lt; trunc(file, 23);
  out &lt;&lt; std::setw(12) &lt;&lt; pNode-&gt;type_;
  out &lt;&lt; std::setw(35) &lt;&lt; trunc(pNode-&gt;name_, 33);
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;startLineCount_;
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;endLineCount_ - pNode-&gt;startLineCount_ + 1;
  size_t debug1 = pNode-&gt;startLineCount_;
  size_t debug2 = pNode-&gt;endLineCount_;
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;complexity_;
  Rslt::write(out.str());
}</div>
//----&lt; display lines containing public data declaration &gt;-----------

std::string CodeAnalysisExecutive::showData(const Scanner::ITokCollection* pTc)
{
<input onclick="expand_collapse(simplediv570.id, this.id)" type="button" value=" - " id="myButton570" /><div id="simplediv570" style="display:block; ">
  std::string semiExpStr;
  for (size_t i=0; i&lt;pTc-&gt;length(); ++i)
    semiExpStr += (*pTc)[i] + " ";
  return semiExpStr;
}</div>

void CodeAnalysisExecutive::displayDataLines(ASTNode* pNode, bool isSummary)
{
<input onclick="expand_collapse(simplediv571.id, this.id)" type="button" value=" - " id="myButton571" /><div id="simplediv571" style="display:block; ">
  for (auto datum : pNode-&gt;decl_)
  {
<input onclick="expand_collapse(simplediv572.id, this.id)" type="button" value=" - " id="myButton572" /><div id="simplediv572" style="display:block; ">
    if (pNode-&gt;parentType_ == "namespace" || pNode-&gt;parentType_ == "class" || pNode-&gt;parentType_ == "struct")
    {
<input onclick="expand_collapse(simplediv573.id, this.id)" type="button" value=" - " id="myButton573" /><div id="simplediv573" style="display:block; ">
      if (pNode-&gt;type_ == "function" || pNode-&gt;parentType_ == "function")
        continue;
      if (datum.access_ == Access::publ && datum.declType_ == DeclType::dataDecl)
      {
<input onclick="expand_collapse(simplediv574.id, this.id)" type="button" value=" - " id="myButton574" /><div id="simplediv574" style="display:block; ">
        std::ostringstream out;
        out &lt;&lt; std::right;
        out &lt;&lt; "\n ";
        out &lt;&lt; std::setw(25) &lt;&lt; "public data:" &lt;&lt; " ";
        if (isSummary)
        {
<input onclick="expand_collapse(simplediv575.id, this.id)" type="button" value=" - " id="myButton575" /><div id="simplediv575" style="display:block; ">
          out &lt;&lt; datum.package_ &lt;&lt; " : " &lt;&lt; datum.line_ &lt;&lt; " - "
            &lt;&lt; pNode-&gt;type_ &lt;&lt; " " &lt;&lt; pNode-&gt;name_ &lt;&lt; "\n " &lt;&lt; std::setw(15) &lt;&lt; " ";
        }</div>
        out &lt;&lt; showData(datum.pTc);
        Rslt::write(out.str());
      }</div>
    }</div>
  }</div>
}</div>
//----&lt;  helper for displayMetrics() &gt;-------------------------------
/*
* - Breaking this out as a separate function allows application to
*   display metrics for a subset of the Abstract Syntax Tree
*/
void CodeAnalysisExecutive::displayMetrics(ASTNode* root)
{
<input onclick="expand_collapse(simplediv576.id, this.id)" type="button" value=" - " id="myButton576" /><div id="simplediv576" style="display:block; ">
  flushLogger();
  std::ostringstream out;
  out &lt;&lt; "Code Metrics - Start Line, Size (lines/code), and Complexity (number of scopes)";
  Utils::sTitle(out.str(), 3, 92, out, '=');
  out &lt;&lt; "\n";
  Rslt::write(out.str());

  std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) {
<input onclick="expand_collapse(simplediv577.id, this.id)" type="button" value=" - " id="myButton577" /><div id="simplediv577" style="display:block; ">
    if (
      pNode-&gt;type_ == "namespace" ||
      pNode-&gt;type_ == "function" ||
      pNode-&gt;type_ == "class" ||
      pNode-&gt;type_ == "interface" ||
      pNode-&gt;type_ == "struct" ||
      pNode-&gt;type_ == "lambda"
      )
      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode));
  }</div>;
  ASTWalkNoIndent(root, co);
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts());
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames());

  displayHeader();

  std::string prevFile;
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv578.id, this.id)" type="button" value=" - " id="myButton578" /><div id="simplediv578" style="display:block; ">
    if (item.first != prevFile)
    {
<input onclick="expand_collapse(simplediv579.id, this.id)" type="button" value=" - " id="myButton579" /><div id="simplediv579" style="display:block; ">
      Rslt::write("\n");
      displayHeader();
    }</div>
    displayMetricsLine(item.first, item.second);
    displayDataLines(item.second);
    prevFile = item.first;
  }</div>
  Rslt::write("\n");
}</div>
//----&lt; display metrics results of code analysis &gt;---------------

void CodeAnalysisExecutive::displayMetrics()
{
<input onclick="expand_collapse(simplediv580.id, this.id)" type="button" value=" - " id="myButton580" /><div id="simplediv580" style="display:block; ">
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  displayMetrics(pGlobalScope);
}</div>
//----&lt; walk tree of element nodes &gt;---------------------------------

template&lt;typename element&gt;
void TreeWalk(element* pItem, bool details = false)
{
<input onclick="expand_collapse(simplediv581.id, this.id)" type="button" value=" - " id="myButton581" /><div id="simplediv581" style="display:block; ">
  static std::string path;
  if (path != pItem-&gt;path_ && details == true)
  {
<input onclick="expand_collapse(simplediv582.id, this.id)" type="button" value=" - " id="myButton582" /><div id="simplediv582" style="display:block; ">
    path = pItem-&gt;path_;
    Rslt::write("\n" + path);
  }</div>
  static size_t indentLevel = 0;
  std::ostringstream out;
  out &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pItem-&gt;show();
  Rslt::write(out.str());
  auto iter = pItem-&gt;children_.begin();
  ++indentLevel;
  while (iter != pItem-&gt;children_.end())
  {
<input onclick="expand_collapse(simplediv583.id, this.id)" type="button" value=" - " id="myButton583" /><div id="simplediv583" style="display:block; ">
    TreeWalk(*iter);
    ++iter;
  }</div>
  --indentLevel;
}</div>
//----&lt; display the AbstrSynTree build in processSourceCode() &gt;------

void CodeAnalysisExecutive::displayAST()
{
<input onclick="expand_collapse(simplediv584.id, this.id)" type="button" value=" - " id="myButton584" /><div id="simplediv584" style="display:block; ">
  flushLogger();
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope();
  Utils::title("Abstract Syntax Tree");
  TreeWalk(pGlobalScope);
  Rslt::write("\n");
}</div>
//----&lt; show functions with metrics exceeding specified limits &gt;-----

void CodeAnalysisExecutive::displayMetricSummary(size_t sMax, size_t cMax)
{
<input onclick="expand_collapse(simplediv585.id, this.id)" type="button" value=" - " id="myButton585" /><div id="simplediv585" style="display:block; ">
  flushLogger();
  std::ostringstream out;
  Utils::sTitle("Functions Exceeding Metric Limits and Public Data", 3, 92, out, '=');
  Rslt::write(out.str());
  displayHeader();

  if (fileNodes_.size() == 0)  // only build fileNodes_ if displayMetrics hasn't been called
  {
<input onclick="expand_collapse(simplediv586.id, this.id)" type="button" value=" - " id="myButton586" /><div id="simplediv586" style="display:block; ">
    std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) {
<input onclick="expand_collapse(simplediv587.id, this.id)" type="button" value=" - " id="myButton587" /><div id="simplediv587" style="display:block; ">
      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode));
    }</div>;
    ASTNode* pGlobalNamespace = pRepo_-&gt;getGlobalScope();
    ASTWalkNoIndent(pGlobalNamespace, co);
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts());
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames());
  }</div>
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv588.id, this.id)" type="button" value=" - " id="myButton588" /><div id="simplediv588" style="display:block; ">
    if (item.second-&gt;type_ == "function")
    {
<input onclick="expand_collapse(simplediv589.id, this.id)" type="button" value=" - " id="myButton589" /><div id="simplediv589" style="display:block; ">
      size_t size = item.second-&gt;endLineCount_ - item.second-&gt;startLineCount_ + 1;
      size_t cmpl = item.second-&gt;complexity_;
      if (size &gt; sMax || cmpl &gt; cMax)
        displayMetricsLine(item.first, item.second);
    }</div>
  }</div>
  Rslt::write("\n");
  for (auto item : fileNodes_)
  {
<input onclick="expand_collapse(simplediv590.id, this.id)" type="button" value=" - " id="myButton590" /><div id="simplediv590" style="display:block; ">
    displayDataLines(item.second, true);
  }</div>
  Rslt::write("\n");
}</div>
//----&lt; comparison functor for sorting SLOC display &gt;----------------

struct compFiles
{
<input onclick="expand_collapse(simplediv591.id, this.id)" type="button" value=" - " id="myButton591" /><div id="simplediv591" style="display:block; ">
private:
  std::string ChangeFirstCharOfExt(const std::string& fileName) const
  {
<input onclick="expand_collapse(simplediv592.id, this.id)" type="button" value=" - " id="myButton592" /><div id="simplediv592" style="display:block; ">
    std::string temp = fileName;
    size_t pos = temp.find_last_of('.');
    if (pos &lt; temp.size() - 1)
      if (temp[pos + 1] == 'h')
        temp[pos + 1] = 'a';
    return temp;
  }</div>
public:
  bool operator()(const std::string& fileName1, const std::string& fileName2) const
  {
<input onclick="expand_collapse(simplediv593.id, this.id)" type="button" value=" - " id="myButton593" /><div id="simplediv593" style="display:block; ">
    return ChangeFirstCharOfExt(fileName1) &lt; ChangeFirstCharOfExt(fileName2);
  }</div>
}</div>;
//----&lt; show sizes of all the files processed &gt;----------------------

void CodeAnalysisExecutive::displaySlocs()
{
<input onclick="expand_collapse(simplediv594.id, this.id)" type="button" value=" - " id="myButton594" /><div id="simplediv594" style="display:block; ">
  flushLogger();
  Utils::sTitle("File Size - Source Lines of Code", 3, 92);
  size_t slocCount = 0;
  std::map&lt;std::string, size_t, compFiles&gt; fileColl;
  for (auto item : fileMap_)
  {
<input onclick="expand_collapse(simplediv595.id, this.id)" type="button" value=" - " id="myButton595" /><div id="simplediv595" style="display:block; ">
    for (auto file : item.second)
    {
<input onclick="expand_collapse(simplediv596.id, this.id)" type="button" value=" - " id="myButton596" /><div id="simplediv596" style="display:block; ">
      File fileName = FileSystem::Path::getName(file);
      fileColl[file] = slocMap_[fileName];
    }</div>
  }</div>
  for (auto fitem : fileColl)
  {
<input onclick="expand_collapse(simplediv597.id, this.id)" type="button" value=" - " id="myButton597" /><div id="simplediv597" style="display:block; ">
    std::ostringstream out;
    out &lt;&lt; "\n  " &lt;&lt; std::setw(8) &lt;&lt; fitem.second &lt;&lt; " : " &lt;&lt; fitem.first;
    Rslt::write(out.str());
    slocCount += fitem.second;
  }</div>
  std::ostringstream out;
  out &lt;&lt; "\n\n      Total line count = " &lt;&lt; slocCount &lt;&lt; "\n";
  Rslt::write(out.str());
  Rslt::write("\n");
}</div>
//----&lt; display analysis info based on command line options &gt;--------

void CodeAnalysisExecutive::dispatchOptionalDisplays()
{
<input onclick="expand_collapse(simplediv598.id, this.id)" type="button" value=" - " id="myButton598" /><div id="simplediv598" style="display:block; ">
  for (auto opt : options_)
  {
<input onclick="expand_collapse(simplediv599.id, this.id)" type="button" value=" - " id="myButton599" /><div id="simplediv599" style="display:block; ">
    switch (opt)
    {
<input onclick="expand_collapse(simplediv600.id, this.id)" type="button" value=" - " id="myButton600" /><div id="simplediv600" style="display:block; ">
    case 'm':
      displayMetrics();
      Rslt::start();
      break;
    case 'a':
      displayAST();
      Rslt::start();
      break;
    case 's':
      displaySlocs();
      Rslt::start();
      break;
    default:
      break;
    }</div>
  }</div>
}</div>
//----&lt; display analysis info based on command line options &gt;--------

void CodeAnalysisExecutive::setDisplayModes()
{
<input onclick="expand_collapse(simplediv601.id, this.id)" type="button" value=" - " id="myButton601" /><div id="simplediv601" style="display:block; ">
  for (auto opt : options_)
  {
<input onclick="expand_collapse(simplediv602.id, this.id)" type="button" value=" - " id="myButton602" /><div id="simplediv602" style="display:block; ">
    switch (opt)
    {
<input onclick="expand_collapse(simplediv603.id, this.id)" type="button" value=" - " id="myButton603" /><div id="simplediv603" style="display:block; ">
    case 'r':
      Rslt::start();
      break;
    case 'd':
      Demo::start();
      break;
    case 'b':
      Dbug::start();
      break;
    case 'f':
      setLogFile("logFile.txt");
      break;
    default:
      if (opt != 'a' && opt != 'b' && opt != 'd' && opt != 'f' && opt != 'm' && opt != 'r' && opt != 's')
      {
<input onclick="expand_collapse(simplediv604.id, this.id)" type="button" value=" - " id="myButton604" /><div id="simplediv604" style="display:block; ">
        std::cout &lt;&lt; "\n\n  unknown option " &lt;&lt; opt &lt;&lt; "\n\n";
      }</div>
    }</div>
  }</div>
}</div>
//----&lt; helper functions for managing application's logging &gt;--------

void CodeAnalysisExecutive::startLogger(std::ostream& out)
{
<input onclick="expand_collapse(simplediv605.id, this.id)" type="button" value=" - " id="myButton605" /><div id="simplediv605" style="display:block; ">
  Rslt::attach(&out);
  Demo::attach(&out);
  Dbug::attach(&out);

  // will start Demo and Dbug if  have options /d and /b

  setDisplayModes();
}</div>

void CodeAnalysisExecutive::flushLogger()
{
<input onclick="expand_collapse(simplediv606.id, this.id)" type="button" value=" - " id="myButton606" /><div id="simplediv606" style="display:block; ">
  Rslt::flush();
  Demo::flush();
  Dbug::flush();
}</div>

void CodeAnalysisExecutive::stopLogger()
{
<input onclick="expand_collapse(simplediv607.id, this.id)" type="button" value=" - " id="myButton607" /><div id="simplediv607" style="display:block; ">
  Rslt::flush();
  Demo::flush();
  Dbug::flush();
  Rslt::stop();
  Demo::stop();
  Dbug::stop();
}</div>
//----&lt; open file stream for logging &gt;-------------------------------
/*
*  - must come after CodeAnalysisExecutive::processCommandLine()
*  - must come before starting any of the loggers
*/
void CodeAnalysisExecutive::setLogFile(const File& file)
{
<input onclick="expand_collapse(simplediv608.id, this.id)" type="button" value=" - " id="myButton608" /><div id="simplediv608" style="display:block; ">
  std::string path = getAnalysisPath();
  path += "\\" + file;
  pLogStrm_ = new std::ofstream(path);
  if (pLogStrm_-&gt;good())
  {
<input onclick="expand_collapse(simplediv609.id, this.id)" type="button" value=" - " id="myButton609" /><div id="simplediv609" style="display:block; ">
    Rslt::attach(pLogStrm_);
    Demo::attach(pLogStrm_);
    Dbug::attach(pLogStrm_);
  }</div>
  else
    Rslt::write("\n  couldn't open logFile.txt for writing");
}</div>

#include &lt;fstream&gt;

void startHttpServer(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv610.id, this.id)" type="button" value=" - " id="myButton610" /><div id="simplediv610" style="display:block; ">
  Rslt::attach(&std::cout);
  Rslt::start();
  Rslt::title("\n  HttpMessage Server started");
  BlockingQueue&lt;HttpMessage&gt; msgQ;
  try
  {
<input onclick="expand_collapse(simplediv611.id, this.id)" type="button" value=" - " id="myButton611" /><div id="simplediv611" style="display:block; ">
	SocketSystem ss;
	SocketListener sl(8080, Socket::IP6);
	ClientHandler cp(msgQ);
	cp.ProcessCommandLine(argc, argv);
	sl.start(cp);
	 while (true)
	 {
<input onclick="expand_collapse(simplediv612.id, this.id)" type="button" value=" - " id="myButton612" /><div id="simplediv612" style="display:block; ">
		HttpMessage msg = msgQ.deQ();
		// if message type == "upload_files triggercodeAnalyzer.enq("upload success");
		Rslt::write("\n\n  server recvd message contents:\n" + msg.toString());
		if (msg.attributes().size() &gt; 0)
		{
<input onclick="expand_collapse(simplediv613.id, this.id)" type="button" value=" - " id="myButton613" /><div id="simplediv613" style="display:block; ">
			if (msg.attributes()[0].first == "GET")
			{
<input onclick="expand_collapse(simplediv614.id, this.id)" type="button" value=" - " id="myButton614" /><div id="simplediv614" style="display:block; ">
				processGetMessages(msg, argc, argv);
			}</div>
			else if (msg.attributes()[0].first == "POST")
			{
<input onclick="expand_collapse(simplediv615.id, this.id)" type="button" value=" - " id="myButton615" /><div id="simplediv615" style="display:block; ">
				processPostMessages(msg, argc, argv);
			}</div>
		}</div>
		Rslt::flush();
	 }</div>
   }</div>
   catch (std::exception& exc)
   {
<input onclick="expand_collapse(simplediv616.id, this.id)" type="button" value=" - " id="myButton616" /><div id="simplediv616" style="display:block; ">
	 Rslt::write("\n  Exeception caught: ");
	 std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
	 Rslt::write(exMsg);
   }</div>
}</div>

void receiver(int argc, char* argv[]) {
<input onclick="expand_collapse(simplediv617.id, this.id)" type="button" value=" - " id="myButton617" /><div id="simplediv617" style="display:block; ">
	try {
<input onclick="expand_collapse(simplediv618.id, this.id)" type="button" value=" - " id="myButton618" /><div id="simplediv618" style="display:block; ">
		startHttpServer(argc, argv);
	}</div>
	catch (std::exception& ex) {
<input onclick="expand_collapse(simplediv619.id, this.id)" type="button" value=" - " id="myButton619" /><div id="simplediv619" style="display:block; ">
		cout &lt;&lt; "Exception caught in receiver thread" &lt;&lt; endl;
		cout &lt;&lt; ex.what() &lt;&lt; endl;
	}</div>
}</div>
void displayCommandLineArgumentsHelp(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv620.id, this.id)" type="button" value=" - " id="myButton620" /><div id="simplediv620" style="display:block; ">
	Utilities::StringHelper::Title("Display Ambiguous Arguments meaning : \n");
	for (int i = 0; i &lt; argc; i++) {
<input onclick="expand_collapse(simplediv621.id, this.id)" type="button" value=" - " id="myButton621" /><div id="simplediv621" style="display:block; ">
		if (i == 1) {
<input onclick="expand_collapse(simplediv622.id, this.id)" type="button" value=" - " id="myButton622" /><div id="simplediv622" style="display:block; ">
			cout &lt;&lt; "Argument 1:" &lt;&lt; "To run CodeAnalyzer on the Repository folder :" &lt;&lt; argv[i] &lt;&lt; endl;
		}</div>
		if (i == 6) {
<input onclick="expand_collapse(simplediv623.id, this.id)" type="button" value=" - " id="myButton623" /><div id="simplediv623" style="display:block; ">
			cout &lt;&lt; "Argument 6:" &lt;&lt; "To store the HTML files published by CodePublisher :" &lt;&lt; argv[6] &lt;&lt; endl;
		}</div>
		if (i == 7) {
<input onclick="expand_collapse(simplediv624.id, this.id)" type="button" value=" - " id="myButton624" /><div id="simplediv624" style="display:block; ">
			cout &lt;&lt; "Argument 7:" &lt;&lt; "The physical path mapped to virtual Directory which also stores the HTML files in addition to local folder " &lt;&lt; argv[7] &lt;&lt; endl;
		}</div>
		if (i == 8) {
<input onclick="expand_collapse(simplediv625.id, this.id)" type="button" value=" - " id="myButton625" /><div id="simplediv625" style="display:block; ">
			cout &lt;&lt; "Argument 8" &lt;&lt; "The virtual Directory hosted by IIS is :" &lt;&lt; argv[8] &lt;&lt; " and maps to physical path : Argument 7 = " &lt;&lt; argv[7] &lt;&lt; endl;
		}</div>
	}</div>
}</div>

int main(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv626.id, this.id)" type="button" value=" - " id="myButton626" /><div id="simplediv626" style="display:block; ">	
	Utilities::StringHelper::Title("Requirement 2 : \n");
	Utilities::StringHelper::Title("Used C++ standard library's streams for all console I/O and new and delete for all heap-based memory management.");
	Utilities::StringHelper::Title("Requirement 9 : Starting the Test Executive to demonstarte all the project 4 requirments");
	displayCommandLineArgumentsHelp(argc, argv);
	std::thread receieverthread(receiver, argc, argv); 
  receieverthread.join();
  return 0;
}</div></pre>
</body>
</html>
